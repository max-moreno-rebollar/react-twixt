{"ast":null,"code":"var _jsxFileName = \"/home/maxmoreno/Projects/twixt-remake/src/Board.js\";\nimport React, { useState } from 'react';\nimport Box from './Box';\nimport Connection from './Connection';\n\nfunction Board(props) {\n  const initialPegs = initilizePegs();\n  const [lineState, setLineState] = useState([]);\n  const [currPlayer, setCurrPlayer] = useState(true);\n  const [pegs, setPegState] = useState(initialPegs);\n\n  function initilizePegs() {\n    const initPegState = [];\n\n    for (let row = 0; row < 24; row++) {\n      for (let col = 0; col < 24; col++) {\n        const index = row * 24 + col;\n        initPegState[index] = {\n          id: index,\n          cx: 17.5 + col * 35,\n          cy: 17.5 + row * 35,\n          clickedBy: 0\n        };\n      }\n    }\n\n    return initPegState;\n  }\n  /*function findSlope(line) {\n      const slope = (line.x1 - line.x2) / (line.y1 - line.y2);\n      return slope;\n  }\n  \n  function createMatrix(line1, line2) {\n      const slope1 = findSlope(line1);\n      const slope2 = findSlope(line2);\n      const initMatrix = [-1* slope1, 1, (-1 * slope1 * line1.y1) + line1.x1, -1* slope2, 1, (-1 * slope2 * line2.y1) + line2.x1];\n      return initMatrix;\n  }\n   function rowReduce(matrix) {\n      // first operation\n      const a1 = matrix[0]\n      matrix[0] = 1\n      matrix[1] = matrix[1] / a1\n      matrix[2] = matrix[2] / a1\n      \n      // 0 in first col second row\n      const a2 = matrix[3]\n      matrix[3] = 0;\n      matrix[4] = matrix[4] + (matrix[1]*-1*a2)   \n      matrix[5] = matrix[5] + (matrix[2]*-1*a2)\n      \n      // 1 in the second column\n      const b2 = matrix[4]\n      matrix[4] = 1\n      matrix[5] = matrix[5] / b2\n       const b1 = matrix[1]\n      matrix[1] = 0\n      matrix[2] = matrix[2] + (-1 * b1  * matrix[5])\n      return matrix\n  }\n   function checkIfValidLine(newLine, oldLine) {\n      const currMatrix = createMatrix(newLine, oldLine);\n      rowReduce(currMatrix);\n      console.log(currMatrix);\n      return true;\n  }*/\n\n\n  function checkIfPotentialLine(i) {\n    const slicedLineState = lineState.slice(); // first\n\n    if (i >= 49) {\n      if (pegs[i].clickedBy === pegs[i - 49].clickedBy) {\n        slicedLineState.push({\n          x1: pegs[i].cx,\n          y1: pegs[i].cy,\n          x2: pegs[i - 49].cx,\n          y2: pegs[i - 49].cy\n        });\n      }\n    }\n\n    setLineState(slicedLineState);\n  }\n\n  function handleClick(i) {\n    const slicedPegState = pegs.slice();\n    currPlayer ? slicedPegState[i].clickedBy = 1 : slicedPegState[i].clickedBy = 2;\n    setCurrPlayer(!currPlayer);\n    setPegState(slicedPegState);\n    checkIfPotentialLine(i);\n  }\n  /*function resetState() {\n      if(currLineState === 2){\n          const slicedLineState = lineState.slice();\n          const newLine = {x1: boardState[boardState.length - 2].startPoint, y1: boardState[boardState.length - 2].endPoint,\n              x2: boardState[boardState.length - 1].startPoint, y2:boardState[boardState.length - 1].endPoint};\n           if(connections.length === 0) {\n              slicedLineState.push(newLine);\n          } else {\n              for(const oldLine of connections) {\n                  if(checkIfValidLine(newLine, oldLine)) {\n                      slicedLineState.push(newLine);\n                  }\n              }\n          }\n           setLineState(slicedLineState);\n          setCurrLineState(0);\n          setBoardState([]);\n      }\n  }*/\n  //useEffect(che;\n\n\n  const allPegs = pegs.map(peg => {\n    let currColor = \"black\";\n\n    if (peg.clickedBy === 1) {\n      currColor = \"red\";\n    } else if (peg.clickedBy === 2) {\n      currColor = \"blue\";\n    }\n\n    return /*#__PURE__*/React.createElement(Box, {\n      key: peg.id,\n      cx: peg.cx,\n      cy: peg.cy,\n      color: currColor,\n      onClick: () => handleClick(peg.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    });\n  });\n  const connections = lineState.map((line, index) => {\n    return /*#__PURE__*/React.createElement(Connection, {\n      key: index,\n      x1: line.x1,\n      y1: line.y1,\n      x2: line.x2,\n      y2: line.y2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    height: \"800\",\n    width: \"800\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, connections, allPegs);\n}\n\nexport default Board;","map":{"version":3,"sources":["/home/maxmoreno/Projects/twixt-remake/src/Board.js"],"names":["React","useState","Box","Connection","Board","props","initialPegs","initilizePegs","lineState","setLineState","currPlayer","setCurrPlayer","pegs","setPegState","initPegState","row","col","index","id","cx","cy","clickedBy","checkIfPotentialLine","i","slicedLineState","slice","push","x1","y1","x2","y2","handleClick","slicedPegState","allPegs","map","peg","currColor","connections","line"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Box from './Box';\nimport Connection from './Connection';\n\nfunction Board(props) {\n    const initialPegs = initilizePegs();\n    const [lineState, setLineState] = useState([]);\n    const [currPlayer, setCurrPlayer] = useState(true);\n    const [pegs, setPegState] = useState(initialPegs);\n\n    function initilizePegs() {\n        const initPegState = [];\n        for(let row = 0; row < 24; row++) {\n            for(let col = 0; col < 24; col++) {\n                const index = row * 24 + col;\n                initPegState[index] = {id: index, cx: 17.5 + col * 35, cy: 17.5 + row * 35, clickedBy: 0};\n            }\n        }\n        return initPegState;\n    }\n\n    /*function findSlope(line) {\n        const slope = (line.x1 - line.x2) / (line.y1 - line.y2);\n        return slope;\n    }\n    \n    function createMatrix(line1, line2) {\n        const slope1 = findSlope(line1);\n        const slope2 = findSlope(line2);\n        const initMatrix = [-1* slope1, 1, (-1 * slope1 * line1.y1) + line1.x1, -1* slope2, 1, (-1 * slope2 * line2.y1) + line2.x1];\n        return initMatrix;\n    }\n\n    function rowReduce(matrix) {\n        // first operation\n        const a1 = matrix[0]\n        matrix[0] = 1\n        matrix[1] = matrix[1] / a1\n        matrix[2] = matrix[2] / a1\n        \n        // 0 in first col second row\n        const a2 = matrix[3]\n        matrix[3] = 0;\n        matrix[4] = matrix[4] + (matrix[1]*-1*a2)   \n        matrix[5] = matrix[5] + (matrix[2]*-1*a2)\n        \n        // 1 in the second column\n        const b2 = matrix[4]\n        matrix[4] = 1\n        matrix[5] = matrix[5] / b2\n\n        const b1 = matrix[1]\n        matrix[1] = 0\n        matrix[2] = matrix[2] + (-1 * b1  * matrix[5])\n        return matrix\n    }\n\n    function checkIfValidLine(newLine, oldLine) {\n        const currMatrix = createMatrix(newLine, oldLine);\n        rowReduce(currMatrix);\n        console.log(currMatrix);\n        return true;\n    }*/\n\n    function checkIfPotentialLine(i) {\n        const slicedLineState = lineState.slice();\n\n        // first\n        if(i >= 49) {\n            if(pegs[i].clickedBy === pegs[i - 49].clickedBy) {\n                slicedLineState.push({x1: pegs[i].cx, y1: pegs[i].cy, x2: pegs[i - 49].cx, y2: pegs[i - 49].cy});\n            }    \n        }\n        \n        setLineState(slicedLineState);\n    }\n\n    function handleClick(i) {\n        const slicedPegState = pegs.slice();\n        currPlayer ? slicedPegState[i].clickedBy = 1 : slicedPegState[i].clickedBy = 2;\n        setCurrPlayer(!currPlayer);\n        setPegState(slicedPegState);\n        checkIfPotentialLine(i);\n    }\n\n    /*function resetState() {\n        if(currLineState === 2){\n            const slicedLineState = lineState.slice();\n            const newLine = {x1: boardState[boardState.length - 2].startPoint, y1: boardState[boardState.length - 2].endPoint,\n                x2: boardState[boardState.length - 1].startPoint, y2:boardState[boardState.length - 1].endPoint};\n\n            if(connections.length === 0) {\n                slicedLineState.push(newLine);\n            } else {\n                for(const oldLine of connections) {\n                    if(checkIfValidLine(newLine, oldLine)) {\n                        slicedLineState.push(newLine);\n                    }\n                }\n            }\n\n            setLineState(slicedLineState);\n            setCurrLineState(0);\n            setBoardState([]);\n        }\n    }*/\n\n    //useEffect(che;\n\n\n\n    const allPegs = pegs.map((peg) => {\n        let currColor = \"black\";\n        if(peg.clickedBy === 1) {\n            currColor = \"red\";\n        } else if(peg.clickedBy === 2) {\n            currColor = \"blue\";\n        }\n        return(\n            <Box key = {peg.id} cx = {peg.cx} cy = {peg.cy} color = {currColor} onClick = {() => handleClick(peg.id)}/>\n        )\n    })\n\n    const connections = lineState.map((line, index) => {\n        return(\n            <Connection key = {index} x1 = {line.x1} y1 = {line.y1} x2 = {line.x2} y2 = {line.y2}/>\n        )\n    })\n\n    return (\n        <svg height = \"800\" width = \"800\">\n            { connections }\n            { allPegs }\n        </svg>\n    )\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}