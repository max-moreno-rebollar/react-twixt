{"ast":null,"code":"var _jsxFileName = \"/home/maxmoreno/Projects/twixt-remake/src/Board.js\";\nimport React, { useState } from 'react';\nimport Box from './Box';\nimport Connection from './Connection';\nimport Player from './Player';\n\nfunction Board(props) {\n  const initialPegs = initilizePegs();\n  const [lineState, setLineState] = useState([]);\n  const [currPlayer, setCurrPlayer] = useState(true);\n  const [pegs, setPegState] = useState(initialPegs);\n  const adjList = new Array(578).fill([]);\n  initAdjList(adjList);\n\n  function initAdjList(adjList) {\n    for (let i = 0; i < 23; i++) {\n      adjList[i].push(576);\n    }\n\n    for (let j = 552; j < 575; j++) {\n      adjList[j].push(577);\n    }\n  }\n\n  function initilizePegs() {\n    const initPegState = [];\n\n    for (let row = 0; row < 24; row++) {\n      for (let col = 0; col < 24; col++) {\n        const index = row * 24 + col;\n        initPegState[index] = {\n          id: index,\n          cx: 17.5 + col * 35,\n          cy: 17.5 + row * 35,\n          gx: col,\n          gy: row,\n          clickedBy: 0\n        };\n      }\n    }\n\n    return initPegState;\n  }\n  /*\n      Compares a line that might be drawn to all the lines that have\n      currently been drawn\n  */\n\n\n  function checkIfNoLineCrosses(newLine) {\n    for (const oldLine of lineState) {\n      const A1 = newLine.p2.gy - newLine.p1.gy;\n      const B1 = newLine.p1.gx - newLine.p2.gx;\n      const A2 = oldLine.p2.gy - oldLine.p1.gy;\n      const B2 = oldLine.p1.gx - oldLine.p2.gx;\n      const C1 = A1 * newLine.p1.gx + B1 * newLine.p1.gy;\n      const C2 = A2 * oldLine.p1.gx + B2 * oldLine.p1.gy;\n      const denominator = A1 * B2 - A2 * B1;\n      const x = (B2 * C1 - B1 * C2) / denominator;\n      const y = (A1 * C2 - A2 * C1) / denominator;\n      const rx0 = (x - newLine.p1.gx) / (newLine.p2.gx - newLine.p1.gx);\n      const rx1 = (x - oldLine.p1.gx) / (oldLine.p2.gx - oldLine.p1.gx);\n      console.log(x, y);\n\n      if (x !== 0 && y !== 0) {\n        if (rx0 >= 0 && rx0 <= 1 && rx1 >= 0 && rx1 <= 1) {\n          console.log(x, y);\n\n          if (x !== newLine.p2.gx && y !== newLine.p2.gy) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  function checkPotentialLines(currPos, adjList) {\n    const slicedLineState = lineState.slice();\n    const positions = [22, 26, 47, 49]; // check the points above the clicked point\n\n    for (let i = 0; i < positions.length; i++) {\n      if (currPos >= positions[i]) {\n        if (pegs[currPos].clickedBy === pegs[currPos - positions[i]].clickedBy) {\n          const potentialLine = {\n            p1: pegs[currPos],\n            p2: pegs[currPos - positions[i]]\n          };\n\n          if (checkIfNoLineCrosses(potentialLine)) {\n            slicedLineState.push(potentialLine);\n            adjList[potentialLine.p1.id].push(potentialLine.p2.id);\n            adjList[potentialLine.p2.id].push(potentialLine.p1.id);\n          }\n        }\n      }\n    } // check the points below the clicked points\n\n\n    for (let i = 0; i < positions.length; i++) {\n      if (currPos <= 576 - positions[i]) {\n        if (pegs[currPos].clickedBy === pegs[currPos + positions[i]].clickedBy) {\n          const potentialLine = {\n            p1: pegs[currPos],\n            p2: pegs[currPos + positions[i]]\n          };\n\n          if (checkIfNoLineCrosses(potentialLine)) {\n            slicedLineState.push(potentialLine);\n          }\n        }\n      }\n    }\n\n    setLineState(slicedLineState);\n  }\n\n  function handleClick(i) {\n    const slicedPegState = pegs.slice();\n\n    if (slicedPegState[i].clickedBy === 0) {\n      currPlayer ? slicedPegState[i].clickedBy = 1 : slicedPegState[i].clickedBy = 2;\n      checkPotentialLines(i);\n      setCurrPlayer(!currPlayer);\n    }\n\n    setPegState(slicedPegState);\n  }\n\n  const allPegs = pegs.map(peg => {\n    let currColor = \"black\";\n\n    if (peg.clickedBy === 1) {\n      currColor = \"red\";\n    } else if (peg.clickedBy === 2) {\n      currColor = \"blue\";\n    }\n\n    return /*#__PURE__*/React.createElement(Box, {\n      key: peg.id,\n      cx: peg.cx,\n      cy: peg.cy,\n      color: currColor,\n      onClick: () => handleClick(peg.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    });\n  });\n  const connections = lineState.map((line, index) => {\n    return /*#__PURE__*/React.createElement(Connection, {\n      key: index,\n      x1: line.p1.cx,\n      y1: line.p1.cy,\n      x2: line.p2.cx,\n      y2: line.p2.cy,\n      stroke: \"black\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    });\n  });\n  const topBorder = /*#__PURE__*/React.createElement(Connection, {\n    x1: \"52.5\",\n    y1: \"35\",\n    x2: \"785.5\",\n    y2: \"35\",\n    stroke: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 23\n    }\n  });\n  const botBorder = /*#__PURE__*/React.createElement(Connection, {\n    x1: \"52.5\",\n    y1: \"805\",\n    x2: \"785.5\",\n    y2: \"805\",\n    stroke: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 23\n    }\n  });\n  const leftBorder = /*#__PURE__*/React.createElement(Connection, {\n    x1: \"35\",\n    y1: \"52.5\",\n    x2: \"35\",\n    y2: \"787.5\",\n    stroke: \"blue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 24\n    }\n  });\n  const rightBorder = /*#__PURE__*/React.createElement(Connection, {\n    x1: \"805\",\n    y1: \"52.5\",\n    x2: \"805\",\n    y2: \"787.5\",\n    stroke: \"blue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 25\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Player, {\n    player: currPlayer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"svg\", {\n    height: \"1000\",\n    width: \"1000\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, topBorder, botBorder, leftBorder, rightBorder, connections, allPegs));\n}\n\nexport default Board;","map":{"version":3,"sources":["/home/maxmoreno/Projects/twixt-remake/src/Board.js"],"names":["React","useState","Box","Connection","Player","Board","props","initialPegs","initilizePegs","lineState","setLineState","currPlayer","setCurrPlayer","pegs","setPegState","adjList","Array","fill","initAdjList","i","push","j","initPegState","row","col","index","id","cx","cy","gx","gy","clickedBy","checkIfNoLineCrosses","newLine","oldLine","A1","p2","p1","B1","A2","B2","C1","C2","denominator","x","y","rx0","rx1","console","log","checkPotentialLines","currPos","slicedLineState","slice","positions","length","potentialLine","handleClick","slicedPegState","allPegs","map","peg","currColor","connections","line","topBorder","botBorder","leftBorder","rightBorder"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Box from './Box';\nimport Connection from './Connection';\nimport Player from './Player';\n\nfunction Board(props) {\n    const initialPegs = initilizePegs();\n    const [lineState, setLineState] = useState([]);\n    const [currPlayer, setCurrPlayer] = useState(true);\n    const [pegs, setPegState] = useState(initialPegs);\n    const adjList = new Array(578).fill([]);\n    initAdjList(adjList);\n\n    function initAdjList(adjList) {\n        for(let i = 0; i < 23; i++) {\n            adjList[i].push(576);\n        }\n\n        for(let j = 552; j < 575; j++) {\n            adjList[j].push(577);\n        }\n    }\n\n\n\n    function initilizePegs() {\n        const initPegState = [];\n        for(let row = 0; row < 24; row++) {\n            for(let col = 0; col < 24; col++) {\n                const index = row * 24 + col;\n                initPegState[index] = {id: index, cx: 17.5 + col * 35,\n                    cy: 17.5 + row * 35, gx: col, gy: row, clickedBy: 0};\n            }\n        }\n        return initPegState;\n    }\n\n    /*\n        Compares a line that might be drawn to all the lines that have\n        currently been drawn\n    */\n    function checkIfNoLineCrosses(newLine) {\n        \n        for(const oldLine of lineState) {\n\n            const A1 = newLine.p2.gy - newLine.p1.gy;\n            const B1 = newLine.p1.gx - newLine.p2.gx;\n            const A2 = oldLine.p2.gy - oldLine.p1.gy;\n            const B2 = oldLine.p1.gx - oldLine.p2.gx;\n            const C1 = A1 * newLine.p1.gx + B1 * newLine.p1.gy;\n            const C2 = A2 * oldLine.p1.gx + B2 * oldLine.p1.gy;\n            const denominator = A1 * B2 - A2 * B1;\n\n            const x = (B2 * C1 - B1 * C2) / denominator;\n            const y = (A1 * C2 - A2 * C1) / denominator;\n\n            const rx0 = (x - newLine.p1.gx) / (newLine.p2.gx - newLine.p1.gx);\n            const rx1 = (x - oldLine.p1.gx) / (oldLine.p2.gx - oldLine.p1.gx);\n\n\n            console.log(x,y);\n\n            if(x !== 0 && y !== 0) {\n                if((rx0 >= 0 && rx0 <= 1) && (rx1 >= 0 && rx1 <= 1)) {\n                    console.log(x, y);\n                    if(x !== newLine.p2.gx && y !== newLine.p2.gy){\n                        return false;\n                    }\n                }\n            }\n        }    \n\n        return true;\n    }\n\n    function checkPotentialLines(currPos, adjList) {\n        \n        const slicedLineState = lineState.slice();\n        const positions = [22, 26, 47, 49];\n\n        // check the points above the clicked point\n        for(let i = 0; i < positions.length; i++) {\n            if(currPos >= positions[i]) {\n                if(pegs[currPos].clickedBy ===\n                    pegs[currPos - positions[i]].clickedBy) {\n                    const potentialLine = {\n                        p1: pegs[currPos],\n                        p2: pegs[currPos - positions[i]]\n                    };\n                    if(checkIfNoLineCrosses(potentialLine)) {\n                        slicedLineState.push(potentialLine);\n                        adjList[potentialLine.p1.id].push(potentialLine.p2.id);\n                        adjList[potentialLine.p2.id].push(potentialLine.p1.id);\n                    }\n                }\n            }\n        }\n\n        // check the points below the clicked points\n        for(let i = 0; i < positions.length; i++) {\n            if(currPos <= 576 - positions[i]) {\n                if(pegs[currPos].clickedBy ===\n                    pegs[currPos + positions[i]].clickedBy) {\n                    const potentialLine = {\n                        p1: pegs[currPos],\n                        p2: pegs[currPos + positions[i]]\n                    };\n                    if(checkIfNoLineCrosses(potentialLine)) {\n                        slicedLineState.push(potentialLine);\n                    }\n                }\n            }\n        }\n        setLineState(slicedLineState);\n    }\n\n    function handleClick(i) {\n        const slicedPegState = pegs.slice();\n        if(slicedPegState[i].clickedBy === 0) {\n            currPlayer ? slicedPegState[i].clickedBy = 1 :\n                slicedPegState[i].clickedBy = 2;\n            checkPotentialLines(i);\n            setCurrPlayer(!currPlayer);\n        }\n        setPegState(slicedPegState);\n    }\n\n    const allPegs = pegs.map((peg) => {\n        let currColor = \"black\";\n        if(peg.clickedBy === 1) {\n            currColor = \"red\";\n        } else if(peg.clickedBy === 2) {\n            currColor = \"blue\";\n        }\n        return(\n            <Box key = {peg.id} cx = {peg.cx} cy = {peg.cy} color = {currColor}\n                onClick = {() => handleClick(peg.id)}/>\n        )\n    })\n\n    const connections = lineState.map((line, index) => {\n        return(\n            <Connection key = {index} x1 = {line.p1.cx} y1 = {line.p1.cy}\n                x2 = {line.p2.cx} y2 = {line.p2.cy} stroke = \"black\"/>\n        )\n    })\n    \n    const topBorder = <Connection x1 = \"52.5\" y1 = \"35\" x2 = \"785.5\" y2 = \"35\"\n        stroke = \"red\"/>;\n    const botBorder = <Connection x1 = \"52.5\" y1 = \"805\" x2 = \"785.5\" y2 = \"805\"\n        stroke = \"red\"/>;\n    const leftBorder = <Connection x1 = \"35\" y1 = \"52.5\" x2 = \"35\" y2 = \"787.5\"\n        stroke = \"blue\"/>;\n    const rightBorder = <Connection x1 = \"805\" y1 = \"52.5\" x2 = \"805\" y2 = \"787.5\"\n        stroke = \"blue\"/>;\n\n    return (\n        <div>\n            <Player player = {currPlayer}/>        \n            <svg height = \"1000\" width = \"1000\">\n                { topBorder }\n                { botBorder }\n                { leftBorder }\n                { rightBorder }\n                { connections }\n                { allPegs }\n            </svg>\n        </div>\n    )\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}