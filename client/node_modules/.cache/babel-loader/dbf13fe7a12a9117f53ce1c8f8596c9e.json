{"ast":null,"code":"var _jsxFileName = \"/home/maxmoreno/Projects/twixt-remake/src/Board.js\";\nimport React, { useState, useEffect } from 'react';\nimport Box from './Box';\nimport Connection from './Connection';\n\nfunction Board(props) {\n  //const [boardState, setBoardState] = useState([]);\n  const [lineState, setLineState] = useState([]); //const [currLineState, setCurrLineState] = useState(0);*/\n\n  /*const [playerOnePegs, setPlayerOneState] = useState([]);\n  const [playerTwoPegs, setPlayerTwoState] = useState([]);*/\n\n  const [currPlayer, setCurrPlayer] = useState(true);\n  const initPegState = [];\n\n  for (let i = 0; i < 576; i++) {\n    initPegState.push({\n      clickedBy: 0\n    });\n  }\n\n  const [pegs, setPegState] = useState(initPegState);\n  /*function findSlope(line) {\n      const slope = (line.x1 - line.x2) / (line.y1 - line.y2);\n      return slope;\n  }\n  \n  function createMatrix(line1, line2) {\n      const slope1 = findSlope(line1);\n      const slope2 = findSlope(line2);\n      const initMatrix = [-1* slope1, 1, (-1 * slope1 * line1.y1) + line1.x1, -1* slope2, 1, (-1 * slope2 * line2.y1) + line2.x1];\n      return initMatrix;\n  }\n   function rowReduce(matrix) {\n      // first operation\n      const a1 = matrix[0]\n      matrix[0] = 1\n      matrix[1] = matrix[1] / a1\n      matrix[2] = matrix[2] / a1\n      \n      // 0 in first col second row\n      const a2 = matrix[3]\n      matrix[3] = 0;\n      matrix[4] = matrix[4] + (matrix[1]*-1*a2)   \n      matrix[5] = matrix[5] + (matrix[2]*-1*a2)\n      \n      // 1 in the second column\n      const b2 = matrix[4]\n      matrix[4] = 1\n      matrix[5] = matrix[5] / b2\n       const b1 = matrix[1]\n      matrix[1] = 0\n      matrix[2] = matrix[2] + (-1 * b1  * matrix[5])\n      return matrix\n  }\n   function checkIfValidLine(newLine, oldLine) {\n      const currMatrix = createMatrix(newLine, oldLine);\n      rowReduce(currMatrix);\n      console.log(currMatrix);\n      return true;\n  }*/\n\n  function checkIfPotentialLine(box) {\n    const slicedLineState = lineState.slice();\n\n    if (pegs[id].clickedBy === pegs[id + 25].clickedBy) {\n      slicedLineState.push({\n        x1: box.cx,\n        y1: box.cy,\n        x2: box.cx + 70,\n        y2: box.cy + 35\n      });\n    }\n  }\n\n  function handleClick(box) {\n    const slicedPegState = pegs.slice();\n    currPlayer ? slicedPegState[box.id].clickedBy = 1 : slicedPegState[box.id].clickedBy = 2;\n    setCurrPlayer(!currPlayer);\n    /*const slicedBoardState = boardState.slice();\n    slicedBoardState.push({startPoint: box.cx, endPoint: box.cy});\n    setBoardState(slicedBoardState);\n    setCurrLineState(currLineState + 1);*/\n  }\n  /*function resetState() {\n      if(currLineState === 2){\n          const slicedLineState = lineState.slice();\n          const newLine = {x1: boardState[boardState.length - 2].startPoint, y1: boardState[boardState.length - 2].endPoint,\n              x2: boardState[boardState.length - 1].startPoint, y2:boardState[boardState.length - 1].endPoint};\n           if(connections.length === 0) {\n              slicedLineState.push(newLine);\n          } else {\n              for(const oldLine of connections) {\n                  if(checkIfValidLine(newLine, oldLine)) {\n                      slicedLineState.push(newLine);\n                  }\n              }\n          }\n           setLineState(slicedLineState);\n          setCurrLineState(0);\n          setBoardState([]);\n      }\n  }*/\n  //useEffect(resetState);\n\n\n  const arr = [];\n\n  for (let row = 0; row < 24; row++) {\n    for (let col = 0; col < 24; col++) {\n      const index = row * 24 + col;\n      arr[index] = {\n        id: index,\n        cx: 17.5 + col * 35,\n        cy: 17.5 + row * 35\n      };\n    }\n  }\n\n  const boxes = arr.map(box => {\n    let currColor = \"black\";\n\n    if (pegs[box.id].clickedBy === 1) {\n      currColor = \"red\";\n    } else if (pegs[box.id].clickedBy === 2) {\n      currColor = \"blue\";\n    }\n\n    return /*#__PURE__*/React.createElement(Box, {\n      key: box.id,\n      cx: box.cx,\n      cy: box.cy,\n      color: currColor,\n      onClick: () => handleClick(box),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    });\n  });\n  /*const connections = lineState.map((line, index) => {\n      return(\n          <Connection key = {index} x1 = {line.x1} y1 = {line.y1} x2 = {line.x2} y2 = {line.y2}/>\n      )\n  })*/\n\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    height: \"800\",\n    width: \"800\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, boxes);\n}\n\nexport default Board;","map":{"version":3,"sources":["/home/maxmoreno/Projects/twixt-remake/src/Board.js"],"names":["React","useState","useEffect","Box","Connection","Board","props","lineState","setLineState","currPlayer","setCurrPlayer","initPegState","i","push","clickedBy","pegs","setPegState","checkIfPotentialLine","box","slicedLineState","slice","id","x1","cx","y1","cy","x2","y2","handleClick","slicedPegState","arr","row","col","index","boxes","map","currColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Box from './Box';\nimport Connection from './Connection';\n\nfunction Board(props) {\n    //const [boardState, setBoardState] = useState([]);\n    const [lineState, setLineState] = useState([]);\n    //const [currLineState, setCurrLineState] = useState(0);*/\n    /*const [playerOnePegs, setPlayerOneState] = useState([]);\n    const [playerTwoPegs, setPlayerTwoState] = useState([]);*/\n\n\n    const [currPlayer, setCurrPlayer] = useState(true);\n    const initPegState = [];\n    for(let i = 0; i < 576; i++) {\n        initPegState.push({clickedBy: 0});\n    }\n    const [pegs, setPegState] = useState(initPegState);\n\n    /*function findSlope(line) {\n        const slope = (line.x1 - line.x2) / (line.y1 - line.y2);\n        return slope;\n    }\n    \n    function createMatrix(line1, line2) {\n        const slope1 = findSlope(line1);\n        const slope2 = findSlope(line2);\n        const initMatrix = [-1* slope1, 1, (-1 * slope1 * line1.y1) + line1.x1, -1* slope2, 1, (-1 * slope2 * line2.y1) + line2.x1];\n        return initMatrix;\n    }\n\n    function rowReduce(matrix) {\n        // first operation\n        const a1 = matrix[0]\n        matrix[0] = 1\n        matrix[1] = matrix[1] / a1\n        matrix[2] = matrix[2] / a1\n        \n        // 0 in first col second row\n        const a2 = matrix[3]\n        matrix[3] = 0;\n        matrix[4] = matrix[4] + (matrix[1]*-1*a2)   \n        matrix[5] = matrix[5] + (matrix[2]*-1*a2)\n        \n        // 1 in the second column\n        const b2 = matrix[4]\n        matrix[4] = 1\n        matrix[5] = matrix[5] / b2\n\n        const b1 = matrix[1]\n        matrix[1] = 0\n        matrix[2] = matrix[2] + (-1 * b1  * matrix[5])\n        return matrix\n    }\n\n    function checkIfValidLine(newLine, oldLine) {\n        const currMatrix = createMatrix(newLine, oldLine);\n        rowReduce(currMatrix);\n        console.log(currMatrix);\n        return true;\n    }*/\n\n    function checkIfPotentialLine(box) {\n        const slicedLineState = lineState.slice();\n        if(pegs[id].clickedBy === pegs[id + 25].clickedBy) {\n            slicedLineState.push({x1: box.cx, y1: box.cy, x2: box.cx + 70, y2: box.cy + 35})\n        }\n    }\n\n    function handleClick(box) {\n        const slicedPegState = pegs.slice();\n        currPlayer ? slicedPegState[box.id].clickedBy = 1 : slicedPegState[box.id].clickedBy = 2;\n        setCurrPlayer(!currPlayer);\n        /*const slicedBoardState = boardState.slice();\n        slicedBoardState.push({startPoint: box.cx, endPoint: box.cy});\n        setBoardState(slicedBoardState);\n        setCurrLineState(currLineState + 1);*/\n    }\n\n    /*function resetState() {\n        if(currLineState === 2){\n            const slicedLineState = lineState.slice();\n            const newLine = {x1: boardState[boardState.length - 2].startPoint, y1: boardState[boardState.length - 2].endPoint,\n                x2: boardState[boardState.length - 1].startPoint, y2:boardState[boardState.length - 1].endPoint};\n\n            if(connections.length === 0) {\n                slicedLineState.push(newLine);\n            } else {\n                for(const oldLine of connections) {\n                    if(checkIfValidLine(newLine, oldLine)) {\n                        slicedLineState.push(newLine);\n                    }\n                }\n            }\n\n            setLineState(slicedLineState);\n            setCurrLineState(0);\n            setBoardState([]);\n        }\n    }*/\n\n    //useEffect(resetState);\n\n    const arr = [];\n    for(let row = 0; row < 24; row++) {\n        for(let col = 0; col < 24; col++) {\n            const index = row * 24 + col;\n            arr[index] = {id: index, cx: 17.5 + col * 35, cy: 17.5 + row * 35};\n        }\n    }\n\n    const boxes = arr.map((box) => {\n        let currColor = \"black\";\n        if(pegs[box.id].clickedBy === 1) {\n            currColor = \"red\";\n        } else if(pegs[box.id].clickedBy === 2) {\n            currColor = \"blue\";\n        }\n        return(\n            <Box key = {box.id} cx = {box.cx} cy = {box.cy} color = {currColor} onClick = {() => handleClick(box)}/>\n        )\n    })\n\n    /*const connections = lineState.map((line, index) => {\n        return(\n            <Connection key = {index} x1 = {line.x1} y1 = {line.y1} x2 = {line.x2} y2 = {line.y2}/>\n        )\n    })*/\n\n    return (\n        <svg height = \"800\" width = \"800\">\n            { boxes }\n        </svg>\n    )\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}