{"ast":null,"code":"var _jsxFileName = \"/home/maxmoreno/Projects/twixt-remake/src/Board.js\";\nimport React, { useState } from 'react';\nimport Box from './Box';\nimport Connection from './Connection';\n\nfunction Board(props) {\n  const initialPegs = initilizePegs();\n  const [lineState, setLineState] = useState([]);\n  const [currPlayer, setCurrPlayer] = useState(true);\n  const [pegs, setPegState] = useState(initialPegs);\n\n  function initilizePegs() {\n    const initPegState = [];\n\n    for (let row = 0; row < 24; row++) {\n      for (let col = 0; col < 24; col++) {\n        const index = row * 24 + col;\n        initPegState[index] = {\n          id: index,\n          cx: 17.5 + col * 35,\n          cy: 17.5 + row * 35,\n          clickedBy: 0\n        };\n      }\n    }\n\n    return initPegState;\n  }\n\n  function findSlope(line) {\n    const slope = (line.x1 - line.x2) / (line.y1 - line.y2);\n    return slope;\n  }\n\n  function createMatrix(line1, line2) {\n    const slope1 = findSlope(line1);\n    const slope2 = findSlope(line2);\n    const initMatrix = [-1 * slope1, 1, -1 * slope1 * line1.y1 + line1.x1, -1 * slope2, 1, -1 * slope2 * line2.y1 + line2.x1];\n    return initMatrix;\n  }\n\n  function rowReduce(matrix) {\n    // first operation\n    const a1 = matrix[0];\n    matrix[0] = 1;\n    matrix[1] = matrix[1] / a1;\n    matrix[2] = matrix[2] / a1; // 0 in first col second row\n\n    const a2 = matrix[3];\n    matrix[3] = 0;\n    matrix[4] = matrix[4] + matrix[1] * -1 * a2;\n    matrix[5] = matrix[5] + matrix[2] * -1 * a2; // 1 in the second column\n\n    const b2 = matrix[4];\n    matrix[4] = 1;\n    matrix[5] = matrix[5] / b2;\n    const b1 = matrix[1];\n    matrix[1] = 0;\n    matrix[2] = matrix[2] + -1 * b1 * matrix[5];\n    return matrix;\n  }\n\n  function checkIfLineCrosses(newLine, oldLine) {\n    const currMatrix = createMatrix(newLine, oldLine);\n    rowReduce(currMatrix);\n    console.log(currMatrix);\n    return true;\n  }\n\n  function checkIfPotentialLine(currPos) {\n    const slicedLineState = lineState.slice();\n    const positions = [22, 26, 47, 49];\n\n    for (let i = 0; i < positions.length; i++) {\n      if (currPos >= positions[i]) {\n        if (pegs[currPos].clickedBy === pegs[currPos - positions[i]].clickedBy) {\n          const potentialLine = {\n            x1: pegs[currPos].cx,\n            y1: pegs[currPos].cy,\n            x2: pegs[currPos - positions[i]].cx,\n            y2: pegs[currPos - positions[i]].cy\n          };\n\n          if (checkIfLineCrosses(newLine)) {\n            slicedLineState.push(newLine);\n          }\n        }\n      }\n    }\n\n    for (let i = 0; i < positions.length; i++) {\n      if (currPos <= 574 - positions[i]) {\n        if (pegs[currPos].clickedBy === pegs[currPos + positions[i]].clickedBy) {\n          slicedLineState.push({\n            x1: pegs[currPos].cx,\n            y1: pegs[currPos].cy,\n            x2: pegs[currPos + positions[i]].cx,\n            y2: pegs[currPos + positions[i]].cy\n          });\n        }\n      }\n    }\n\n    setLineState(slicedLineState);\n  }\n\n  function handleClick(i) {\n    const slicedPegState = pegs.slice();\n\n    if (slicedPegState[i].clickedBy === 0) {\n      currPlayer ? slicedPegState[i].clickedBy = 1 : slicedPegState[i].clickedBy = 2;\n      checkIfPotentialLine(i);\n      setCurrPlayer(!currPlayer);\n    }\n\n    setPegState(slicedPegState);\n  }\n\n  const allPegs = pegs.map(peg => {\n    let currColor = \"black\";\n\n    if (peg.clickedBy === 1) {\n      currColor = \"red\";\n    } else if (peg.clickedBy === 2) {\n      currColor = \"blue\";\n    }\n\n    return /*#__PURE__*/React.createElement(Box, {\n      key: peg.id,\n      cx: peg.cx,\n      cy: peg.cy,\n      color: currColor,\n      onClick: () => handleClick(peg.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }\n    });\n  });\n  const connections = lineState.map((line, index) => {\n    return /*#__PURE__*/React.createElement(Connection, {\n      key: index,\n      x1: line.x1,\n      y1: line.y1,\n      x2: line.x2,\n      y2: line.y2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    height: \"800\",\n    width: \"800\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, connections, allPegs);\n}\n\nexport default Board;","map":{"version":3,"sources":["/home/maxmoreno/Projects/twixt-remake/src/Board.js"],"names":["React","useState","Box","Connection","Board","props","initialPegs","initilizePegs","lineState","setLineState","currPlayer","setCurrPlayer","pegs","setPegState","initPegState","row","col","index","id","cx","cy","clickedBy","findSlope","line","slope","x1","x2","y1","y2","createMatrix","line1","line2","slope1","slope2","initMatrix","rowReduce","matrix","a1","a2","b2","b1","checkIfLineCrosses","newLine","oldLine","currMatrix","console","log","checkIfPotentialLine","currPos","slicedLineState","slice","positions","i","length","potentialLine","push","handleClick","slicedPegState","allPegs","map","peg","currColor","connections"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAClB,QAAMC,WAAW,GAAGC,aAAa,EAAjC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACW,IAAD,EAAOC,WAAP,IAAsBZ,QAAQ,CAACK,WAAD,CAApC;;AAEA,WAASC,aAAT,GAAyB;AACrB,UAAMO,YAAY,GAAG,EAArB;;AACA,SAAI,IAAIC,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAG,EAAvB,EAA2BA,GAAG,EAA9B,EAAkC;AAC9B,WAAI,IAAIC,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAG,EAAvB,EAA2BA,GAAG,EAA9B,EAAkC;AAC9B,cAAMC,KAAK,GAAGF,GAAG,GAAG,EAAN,GAAWC,GAAzB;AACAF,QAAAA,YAAY,CAACG,KAAD,CAAZ,GAAsB;AAACC,UAAAA,EAAE,EAAED,KAAL;AAAYE,UAAAA,EAAE,EAAE,OAAOH,GAAG,GAAG,EAA7B;AAClBI,UAAAA,EAAE,EAAE,OAAOL,GAAG,GAAG,EADC;AACGM,UAAAA,SAAS,EAAE;AADd,SAAtB;AAEH;AACJ;;AACD,WAAOP,YAAP;AACH;;AAED,WAASQ,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,UAAMC,KAAK,GAAG,CAACD,IAAI,CAACE,EAAL,GAAUF,IAAI,CAACG,EAAhB,KAAuBH,IAAI,CAACI,EAAL,GAAUJ,IAAI,CAACK,EAAtC,CAAd;AACA,WAAOJ,KAAP;AACH;;AAED,WAASK,YAAT,CAAsBC,KAAtB,EAA6BC,KAA7B,EAAoC;AAChC,UAAMC,MAAM,GAAGV,SAAS,CAACQ,KAAD,CAAxB;AACA,UAAMG,MAAM,GAAGX,SAAS,CAACS,KAAD,CAAxB;AACA,UAAMG,UAAU,GAAG,CAAC,CAAC,CAAD,GAAIF,MAAL,EAAa,CAAb,EAAiB,CAAC,CAAD,GAAKA,MAAL,GAAcF,KAAK,CAACH,EAArB,GAA2BG,KAAK,CAACL,EAAjD,EACf,CAAC,CAAD,GAAKQ,MADU,EACF,CADE,EACE,CAAC,CAAD,GAAKA,MAAL,GAAcF,KAAK,CAACJ,EAArB,GAA2BI,KAAK,CAACN,EADlC,CAAnB;AAEA,WAAOS,UAAP;AACH;;AAED,WAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACvB;AACA,UAAMC,EAAE,GAAGD,MAAM,CAAC,CAAD,CAAjB;AACAA,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAAZ;AACAA,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAN,GAAYC,EAAxB;AACAD,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAN,GAAYC,EAAxB,CALuB,CAOvB;;AACA,UAAMC,EAAE,GAAGF,MAAM,CAAC,CAAD,CAAjB;AACAA,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAAZ;AACAA,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAN,GAAaA,MAAM,CAAC,CAAD,CAAN,GAAU,CAAC,CAAX,GAAaE,EAAtC;AACAF,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAN,GAAaA,MAAM,CAAC,CAAD,CAAN,GAAU,CAAC,CAAX,GAAaE,EAAtC,CAXuB,CAavB;;AACA,UAAMC,EAAE,GAAGH,MAAM,CAAC,CAAD,CAAjB;AACAA,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAAZ;AACAA,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAN,GAAYG,EAAxB;AAEA,UAAMC,EAAE,GAAGJ,MAAM,CAAC,CAAD,CAAjB;AACAA,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAAZ;AACAA,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAN,GAAa,CAAC,CAAD,GAAKI,EAAL,GAAWJ,MAAM,CAAC,CAAD,CAA1C;AACA,WAAOA,MAAP;AACH;;AAED,WAASK,kBAAT,CAA4BC,OAA5B,EAAqCC,OAArC,EAA8C;AAC1C,UAAMC,UAAU,GAAGf,YAAY,CAACa,OAAD,EAAUC,OAAV,CAA/B;AACAR,IAAAA,SAAS,CAACS,UAAD,CAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACA,WAAO,IAAP;AACH;;AAED,WAASG,oBAAT,CAA8BC,OAA9B,EAAuC;AAEnC,UAAMC,eAAe,GAAGzC,SAAS,CAAC0C,KAAV,EAAxB;AACA,UAAMC,SAAS,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CAAlB;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,SAAS,CAACE,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,UAAGJ,OAAO,IAAIG,SAAS,CAACC,CAAD,CAAvB,EAA4B;AACxB,YAAGxC,IAAI,CAACoC,OAAD,CAAJ,CAAc3B,SAAd,KACCT,IAAI,CAACoC,OAAO,GAAGG,SAAS,CAACC,CAAD,CAApB,CAAJ,CAA6B/B,SADjC,EAC4C;AACxC,gBAAMiC,aAAa,GAAG;AAClB7B,YAAAA,EAAE,EAAEb,IAAI,CAACoC,OAAD,CAAJ,CAAc7B,EADA;AAElBQ,YAAAA,EAAE,EAAEf,IAAI,CAACoC,OAAD,CAAJ,CAAc5B,EAFA;AAGlBM,YAAAA,EAAE,EAAEd,IAAI,CAACoC,OAAO,GAAGG,SAAS,CAACC,CAAD,CAApB,CAAJ,CAA6BjC,EAHf;AAIlBS,YAAAA,EAAE,EAAEhB,IAAI,CAACoC,OAAO,GAAGG,SAAS,CAACC,CAAD,CAApB,CAAJ,CAA6BhC;AAJf,WAAtB;;AAKA,cAAGqB,kBAAkB,CAACC,OAAD,CAArB,EAAgC;AAC5BO,YAAAA,eAAe,CAACM,IAAhB,CAAqBb,OAArB;AACH;AACJ;AACJ;AACJ;;AAED,SAAI,IAAIU,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,SAAS,CAACE,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,UAAGJ,OAAO,IAAI,MAAMG,SAAS,CAACC,CAAD,CAA7B,EAAkC;AAC9B,YAAGxC,IAAI,CAACoC,OAAD,CAAJ,CAAc3B,SAAd,KACCT,IAAI,CAACoC,OAAO,GAAGG,SAAS,CAACC,CAAD,CAApB,CAAJ,CAA6B/B,SADjC,EAC4C;AACxC4B,UAAAA,eAAe,CAACM,IAAhB,CAAqB;AACjB9B,YAAAA,EAAE,EAAEb,IAAI,CAACoC,OAAD,CAAJ,CAAc7B,EADD;AAEjBQ,YAAAA,EAAE,EAAEf,IAAI,CAACoC,OAAD,CAAJ,CAAc5B,EAFD;AAGjBM,YAAAA,EAAE,EAAEd,IAAI,CAACoC,OAAO,GAAGG,SAAS,CAACC,CAAD,CAApB,CAAJ,CAA6BjC,EAHhB;AAIjBS,YAAAA,EAAE,EAAEhB,IAAI,CAACoC,OAAO,GAAGG,SAAS,CAACC,CAAD,CAApB,CAAJ,CAA6BhC;AAJhB,WAArB;AAKH;AACJ;AACJ;;AAEDX,IAAAA,YAAY,CAACwC,eAAD,CAAZ;AACH;;AAED,WAASO,WAAT,CAAqBJ,CAArB,EAAwB;AACpB,UAAMK,cAAc,GAAG7C,IAAI,CAACsC,KAAL,EAAvB;;AACA,QAAGO,cAAc,CAACL,CAAD,CAAd,CAAkB/B,SAAlB,KAAgC,CAAnC,EAAsC;AAClCX,MAAAA,UAAU,GAAG+C,cAAc,CAACL,CAAD,CAAd,CAAkB/B,SAAlB,GAA8B,CAAjC,GAAqCoC,cAAc,CAACL,CAAD,CAAd,CAAkB/B,SAAlB,GAA8B,CAA7E;AACA0B,MAAAA,oBAAoB,CAACK,CAAD,CAApB;AACAzC,MAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACH;;AACDG,IAAAA,WAAW,CAAC4C,cAAD,CAAX;AACH;;AAED,QAAMC,OAAO,GAAG9C,IAAI,CAAC+C,GAAL,CAAUC,GAAD,IAAS;AAC9B,QAAIC,SAAS,GAAG,OAAhB;;AACA,QAAGD,GAAG,CAACvC,SAAJ,KAAkB,CAArB,EAAwB;AACpBwC,MAAAA,SAAS,GAAG,KAAZ;AACH,KAFD,MAEO,IAAGD,GAAG,CAACvC,SAAJ,KAAkB,CAArB,EAAwB;AAC3BwC,MAAAA,SAAS,GAAG,MAAZ;AACH;;AACD,wBACI,oBAAC,GAAD;AAAK,MAAA,GAAG,EAAID,GAAG,CAAC1C,EAAhB;AAAoB,MAAA,EAAE,EAAI0C,GAAG,CAACzC,EAA9B;AAAkC,MAAA,EAAE,EAAIyC,GAAG,CAACxC,EAA5C;AAAgD,MAAA,KAAK,EAAIyC,SAAzD;AAAoE,MAAA,OAAO,EAAI,MAAML,WAAW,CAACI,GAAG,CAAC1C,EAAL,CAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH,GAVe,CAAhB;AAYA,QAAM4C,WAAW,GAAGtD,SAAS,CAACmD,GAAV,CAAc,CAACpC,IAAD,EAAON,KAAP,KAAiB;AAC/C,wBACI,oBAAC,UAAD;AAAY,MAAA,GAAG,EAAIA,KAAnB;AAA0B,MAAA,EAAE,EAAIM,IAAI,CAACE,EAArC;AAAyC,MAAA,EAAE,EAAIF,IAAI,CAACI,EAApD;AAAwD,MAAA,EAAE,EAAIJ,IAAI,CAACG,EAAnE;AAAuE,MAAA,EAAE,EAAIH,IAAI,CAACK,EAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH,GAJmB,CAApB;AAMA,sBACI;AAAK,IAAA,MAAM,EAAG,KAAd;AAAoB,IAAA,KAAK,EAAG,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMkC,WADN,EAEMJ,OAFN,CADJ;AAMH;;AAED,eAAetD,KAAf","sourcesContent":["import React, { useState } from 'react';\nimport Box from './Box';\nimport Connection from './Connection';\n\nfunction Board(props) {\n    const initialPegs = initilizePegs();\n    const [lineState, setLineState] = useState([]);\n    const [currPlayer, setCurrPlayer] = useState(true);\n    const [pegs, setPegState] = useState(initialPegs);\n\n    function initilizePegs() {\n        const initPegState = [];\n        for(let row = 0; row < 24; row++) {\n            for(let col = 0; col < 24; col++) {\n                const index = row * 24 + col;\n                initPegState[index] = {id: index, cx: 17.5 + col * 35,\n                    cy: 17.5 + row * 35, clickedBy: 0};\n            }\n        }\n        return initPegState;\n    }\n\n    function findSlope(line) {\n        const slope = (line.x1 - line.x2) / (line.y1 - line.y2);\n        return slope;\n    }\n    \n    function createMatrix(line1, line2) {\n        const slope1 = findSlope(line1);\n        const slope2 = findSlope(line2);\n        const initMatrix = [-1* slope1, 1, (-1 * slope1 * line1.y1) + line1.x1,\n            -1 * slope2, 1, (-1 * slope2 * line2.y1) + line2.x1];\n        return initMatrix;\n    }\n\n    function rowReduce(matrix) {\n        // first operation\n        const a1 = matrix[0]\n        matrix[0] = 1\n        matrix[1] = matrix[1] / a1\n        matrix[2] = matrix[2] / a1\n        \n        // 0 in first col second row\n        const a2 = matrix[3]\n        matrix[3] = 0;\n        matrix[4] = matrix[4] + (matrix[1]*-1*a2)   \n        matrix[5] = matrix[5] + (matrix[2]*-1*a2)\n        \n        // 1 in the second column\n        const b2 = matrix[4]\n        matrix[4] = 1\n        matrix[5] = matrix[5] / b2\n\n        const b1 = matrix[1]\n        matrix[1] = 0\n        matrix[2] = matrix[2] + (-1 * b1  * matrix[5])\n        return matrix\n    }\n\n    function checkIfLineCrosses(newLine, oldLine) {\n        const currMatrix = createMatrix(newLine, oldLine);\n        rowReduce(currMatrix);\n        console.log(currMatrix);\n        return true;\n    }\n\n    function checkIfPotentialLine(currPos) {\n        \n        const slicedLineState = lineState.slice();\n        const positions = [22, 26, 47, 49];\n        for(let i = 0; i < positions.length; i++) {\n            if(currPos >= positions[i]) {\n                if(pegs[currPos].clickedBy ===\n                    pegs[currPos - positions[i]].clickedBy) {\n                    const potentialLine = {\n                        x1: pegs[currPos].cx,\n                        y1: pegs[currPos].cy,\n                        x2: pegs[currPos - positions[i]].cx,\n                        y2: pegs[currPos - positions[i]].cy};\n                    if(checkIfLineCrosses(newLine)) {\n                        slicedLineState.push(newLine);\n                    }\n                }\n            }\n        }\n\n        for(let i = 0; i < positions.length; i++) {\n            if(currPos <= 574 - positions[i]) {\n                if(pegs[currPos].clickedBy ===\n                    pegs[currPos + positions[i]].clickedBy) {\n                    slicedLineState.push({\n                        x1: pegs[currPos].cx,\n                        y1: pegs[currPos].cy,\n                        x2: pegs[currPos + positions[i]].cx,\n                        y2: pegs[currPos + positions[i]].cy});\n                }\n            }\n        }\n\n        setLineState(slicedLineState);\n    }\n\n    function handleClick(i) {\n        const slicedPegState = pegs.slice();\n        if(slicedPegState[i].clickedBy === 0) {\n            currPlayer ? slicedPegState[i].clickedBy = 1 : slicedPegState[i].clickedBy = 2;\n            checkIfPotentialLine(i);\n            setCurrPlayer(!currPlayer);\n        }\n        setPegState(slicedPegState);\n    }\n\n    const allPegs = pegs.map((peg) => {\n        let currColor = \"black\";\n        if(peg.clickedBy === 1) {\n            currColor = \"red\";\n        } else if(peg.clickedBy === 2) {\n            currColor = \"blue\";\n        }\n        return(\n            <Box key = {peg.id} cx = {peg.cx} cy = {peg.cy} color = {currColor} onClick = {() => handleClick(peg.id)}/>\n        )\n    })\n\n    const connections = lineState.map((line, index) => {\n        return(\n            <Connection key = {index} x1 = {line.x1} y1 = {line.y1} x2 = {line.x2} y2 = {line.y2}/>\n        )\n    })\n\n    return (\n        <svg height = \"800\" width = \"800\">\n            { connections }\n            { allPegs }\n        </svg>\n    )\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}