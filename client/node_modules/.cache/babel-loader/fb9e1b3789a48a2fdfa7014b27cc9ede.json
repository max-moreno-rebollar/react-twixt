{"ast":null,"code":"var _jsxFileName = \"/home/maxmoreno/Projects/twixt-remake/src/Board.js\";\nimport React, { useState, useEffect } from 'react';\nimport Box from './Box';\nimport Connection from './Connection';\n\nfunction Board(props) {\n  const [boardState, setBoardState] = useState([]);\n  const [lineState, setLineState] = useState([]);\n  const [currLineState, setCurrLineState] = useState(0);\n  const [playerOnePegs, setPlayerOneState] = useState([]);\n  const [playerTwoPegs, setPlayerTwoState] = useState([]);\n  const [currPlayer, setCurrPlayer] = useState(true);\n  const initPegState = [];\n\n  for (let i = 0; i < 576; i++) {\n    initPegState.push({\n      clickedBy: 0\n    });\n  }\n\n  const [pegs, setPegState] = useState(initPegState);\n\n  function findSlope(line) {\n    const slope = (line.x1 - line.x2) / (line.y1 - line.y2);\n    return slope;\n  }\n\n  function createMatrix(line1, line2) {\n    const slope1 = findSlope(line1);\n    const slope2 = findSlope(line2);\n    const initMatrix = [-1 * slope1, 1, -1 * slope1 * line1.y1 + line1.x1, -1 * slope2, 1, -1 * slope2 * line2.y1 + line2.x1];\n    return initMatrix;\n  }\n\n  function rowReduce(matrix) {\n    // first operation\n    const a1 = matrix[0];\n    matrix[0] = 1;\n    matrix[1] = matrix[1] / a1;\n    matrix[2] = matrix[2] / a1; // 0 in first col second row\n\n    const a2 = matrix[3];\n    matrix[3] = 0;\n    matrix[4] = matrix[4] + matrix[1] * -1 * a2;\n    matrix[5] = matrix[5] + matrix[2] * -1 * a2; // 1 in the second column\n\n    const b2 = matrix[4];\n    matrix[4] = 1;\n    matrix[5] = matrix[5] / b2;\n    const b1 = matrix[1];\n    matrix[1] = 0;\n    matrix[2] = matrix[2] + -1 * b1 * matrix[5];\n    return matrix;\n  }\n\n  function checkIfValidLine(newLine, oldLine) {\n    const currMatrix = createMatrix(newLine, oldLine);\n    rowReduce(currMatrix);\n    console.log(currMatrix);\n    return true;\n  }\n\n  function handleClick(box) {\n    const slicedPegState = pegs.slice();\n    currPlayer ? slicedPegState[box.id] = 1 : slicedPegState[box.id] = 2;\n    setCurrPlayer(!currPlayer);\n    /*const slicedBoardState = boardState.slice();\n    slicedBoardState.push({startPoint: box.cx, endPoint: box.cy});\n    setBoardState(slicedBoardState);\n    setCurrLineState(currLineState + 1);*/\n  }\n  /*function resetState() {\n      if(currLineState === 2){\n          const slicedLineState = lineState.slice();\n          const newLine = {x1: boardState[boardState.length - 2].startPoint, y1: boardState[boardState.length - 2].endPoint,\n              x2: boardState[boardState.length - 1].startPoint, y2:boardState[boardState.length - 1].endPoint};\n           if(connections.length === 0) {\n              slicedLineState.push(newLine);\n          } else {\n              for(const oldLine of connections) {\n                  if(checkIfValidLine(newLine, oldLine)) {\n                      slicedLineState.push(newLine);\n                  }\n              }\n          }\n           setLineState(slicedLineState);\n          setCurrLineState(0);\n          setBoardState([]);\n      }\n  }*/\n  //useEffect(resetState);\n\n\n  const arr = [];\n\n  for (let row = 0; row < 24; row++) {\n    for (let col = 0; col < 24; col++) {\n      const index = row * 24 + col;\n      arr[index] = {\n        id: index,\n        cx: 17.5 + col * 35,\n        cy: 17.5 + row * 35\n      };\n    }\n  }\n\n  const boxes = arr.map(box => {\n    const currColor = pegs[box.id] === 1 ? \"red\" : \"blue\";\n    return /*#__PURE__*/React.createElement(Box, {\n      key: box.id,\n      cx: box.cx,\n      cy: box.cy,\n      color: currColor,\n      onClick: () => handleClick(box),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    });\n  });\n  /*const connections = lineState.map((line, index) => {\n      return(\n          <Connection key = {index} x1 = {line.x1} y1 = {line.y1} x2 = {line.x2} y2 = {line.y2}/>\n      )\n  })*/\n\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    height: \"800\",\n    width: \"800\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, boxes);\n}\n\nexport default Board;","map":{"version":3,"sources":["/home/maxmoreno/Projects/twixt-remake/src/Board.js"],"names":["React","useState","useEffect","Box","Connection","Board","props","boardState","setBoardState","lineState","setLineState","currLineState","setCurrLineState","playerOnePegs","setPlayerOneState","playerTwoPegs","setPlayerTwoState","currPlayer","setCurrPlayer","initPegState","i","push","clickedBy","pegs","setPegState","findSlope","line","slope","x1","x2","y1","y2","createMatrix","line1","line2","slope1","slope2","initMatrix","rowReduce","matrix","a1","a2","b2","b1","checkIfValidLine","newLine","oldLine","currMatrix","console","log","handleClick","box","slicedPegState","slice","id","arr","row","col","index","cx","cy","boxes","map","currColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Box from './Box';\nimport Connection from './Connection';\n\nfunction Board(props) {\n    const [boardState, setBoardState] = useState([]);\n    const [lineState, setLineState] = useState([]);\n    const [currLineState, setCurrLineState] = useState(0);\n    const [playerOnePegs, setPlayerOneState] = useState([]);\n    const [playerTwoPegs, setPlayerTwoState] = useState([]);\n    const [currPlayer, setCurrPlayer] = useState(true);\n    const initPegState = [];\n    for(let i = 0; i < 576; i++) {\n        initPegState.push({clickedBy: 0});\n    }\n    const [pegs, setPegState] = useState(initPegState);\n\n    function findSlope(line) {\n        const slope = (line.x1 - line.x2) / (line.y1 - line.y2);\n        return slope;\n    }\n    \n    function createMatrix(line1, line2) {\n        const slope1 = findSlope(line1);\n        const slope2 = findSlope(line2);\n        const initMatrix = [-1* slope1, 1, (-1 * slope1 * line1.y1) + line1.x1, -1* slope2, 1, (-1 * slope2 * line2.y1) + line2.x1];\n        return initMatrix;\n    }\n\n    function rowReduce(matrix) {\n        // first operation\n        const a1 = matrix[0]\n        matrix[0] = 1\n        matrix[1] = matrix[1] / a1\n        matrix[2] = matrix[2] / a1\n        \n        // 0 in first col second row\n        const a2 = matrix[3]\n        matrix[3] = 0;\n        matrix[4] = matrix[4] + (matrix[1]*-1*a2)   \n        matrix[5] = matrix[5] + (matrix[2]*-1*a2)\n        \n        // 1 in the second column\n        const b2 = matrix[4]\n        matrix[4] = 1\n        matrix[5] = matrix[5] / b2\n\n        const b1 = matrix[1]\n        matrix[1] = 0\n        matrix[2] = matrix[2] + (-1 * b1  * matrix[5])\n        return matrix\n    }\n\n    function checkIfValidLine(newLine, oldLine) {\n        const currMatrix = createMatrix(newLine, oldLine);\n        rowReduce(currMatrix);\n        console.log(currMatrix);\n        return true;\n    }\n\n    function handleClick(box) {\n        const slicedPegState = pegs.slice();\n        currPlayer ? slicedPegState[box.id] = 1 : slicedPegState[box.id] = 2;\n        setCurrPlayer(!currPlayer);\n        /*const slicedBoardState = boardState.slice();\n        slicedBoardState.push({startPoint: box.cx, endPoint: box.cy});\n        setBoardState(slicedBoardState);\n        setCurrLineState(currLineState + 1);*/\n    }\n\n    /*function resetState() {\n        if(currLineState === 2){\n            const slicedLineState = lineState.slice();\n            const newLine = {x1: boardState[boardState.length - 2].startPoint, y1: boardState[boardState.length - 2].endPoint,\n                x2: boardState[boardState.length - 1].startPoint, y2:boardState[boardState.length - 1].endPoint};\n\n            if(connections.length === 0) {\n                slicedLineState.push(newLine);\n            } else {\n                for(const oldLine of connections) {\n                    if(checkIfValidLine(newLine, oldLine)) {\n                        slicedLineState.push(newLine);\n                    }\n                }\n            }\n\n            setLineState(slicedLineState);\n            setCurrLineState(0);\n            setBoardState([]);\n        }\n    }*/\n\n    //useEffect(resetState);\n\n    const arr = [];\n    for(let row = 0; row < 24; row++) {\n        for(let col = 0; col < 24; col++) {\n            const index = row * 24 + col;\n            arr[index] = {id: index, cx: 17.5 + col * 35, cy: 17.5 + row * 35};\n        }\n    }\n\n    const boxes = arr.map((box) => {\n        const currColor = pegs[box.id] === 1 ? \"red\" : \"blue\";\n        return(\n            <Box key = {box.id} cx = {box.cx} cy = {box.cy} color = {currColor} onClick = {() => handleClick(box)}/>\n        )\n    })\n\n    /*const connections = lineState.map((line, index) => {\n        return(\n            <Connection key = {index} x1 = {line.x1} y1 = {line.y1} x2 = {line.x2} y2 = {line.y2}/>\n        )\n    })*/\n\n    return (\n        <svg height = \"800\" width = \"800\">\n            { boxes }\n        </svg>\n    )\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}