{"ast":null,"code":"var _jsxFileName = \"/home/maxmoreno/Projects/twixt-remake/src/Board.js\";\nimport React, { useState } from 'react';\nimport Box from './Box';\nimport Connection from './Connection';\n\nfunction Board(props) {\n  const initialPegs = initilizePegs();\n  const [lineState, setLineState] = useState([]);\n  const [currPlayer, setCurrPlayer] = useState(true);\n  const [pegs, setPegState] = useState(initialPegs);\n\n  function initilizePegs() {\n    const initPegState = [];\n\n    for (let row = 0; row < 24; row++) {\n      for (let col = 0; col < 24; col++) {\n        const index = row * 24 + col;\n        initPegState[index] = {\n          id: index,\n          cx: 17.5 + col * 35,\n          cy: 17.5 + row * 35,\n          gx: col,\n          gy: row,\n          clickedBy: 0\n        };\n      }\n    }\n\n    return initPegState;\n  }\n  /*\n      Compares a line that might be drawn to all the lines that have\n      currently been drawn\n  */\n\n\n  function checkIfNoLineCrosses(newLine) {\n    /*\n    for(const oldLine of lineState) {\n         const A1 = newLine.y2 - newLine.y1;\n        const B1 = newLine.x1 - newLine.x2;\n        const A2 = oldLine.y2 - oldLine.y1;\n        const B2 = oldLine.x1 - oldLine.x1;\n        const C1 = A1 * newLine.x1 + B1 * newLine.y1;\n        const C2 = A2 * oldLine.x1 + B2 * oldLine.y1;\n        const denominator = A1 * B2 - A2 * B1;\n         const x = (B2 * C1 - B1 * C2) / denominator;\n        const y = (A1 * C2 - A2 * C1) / denominator;\n         const rx0 = (x - newLine.x1) / (newLine.x2 - newLine.x1);\n        const rx1 = (x - oldLine.x1) / (oldLine.x2 - oldLine.x1);\n          console.log(x,y);\n         if(x !== 0 && y !== 0) {\n            if((rx0 >= 0 && rx0 <= 1) && (rx1 >= 0 && rx1 <= 1)) {\n                console.log(x, y);\n                if(x !== newLine.x2 && y !== newLine.y2){\n                    return false;\n                }\n            }\n        }\n    }*/\n    return true;\n  }\n\n  function checkPotentialLines(currPos) {\n    const slicedLineState = lineState.slice();\n    const positions = [22, 26, 47, 49]; // check the points above the clicked point\n\n    for (let i = 0; i < positions.length; i++) {\n      if (currPos >= positions[i]) {\n        if (pegs[currPos].clickedBy === pegs[currPos - positions[i]].clickedBy) {\n          const potentialLine = {\n            p1: pegs[currPos],\n            p2: pegs[currPos - positions[i]]\n          };\n\n          if (checkIfNoLineCrosses(potentialLine)) {\n            slicedLineState.push(potentialLine);\n          }\n        }\n      }\n    } // check the points below the clicked points\n\n\n    for (let i = 0; i < positions.length; i++) {\n      if (currPos <= 576 - positions[i]) {\n        if (pegs[currPos].clickedBy === pegs[currPos + positions[i]].clickedBy) {\n          const potentialLine = {\n            p1: pegs[currPos],\n            p2: pegs[currPos + positions[i]]\n          };\n\n          if (checkIfNoLineCrosses(potentialLine)) {\n            slicedLineState.push(potentialLine);\n          }\n        }\n      }\n    }\n\n    setLineState(slicedLineState);\n  }\n\n  function handleClick(i) {\n    const slicedPegState = pegs.slice();\n\n    if (slicedPegState[i].clickedBy === 0) {\n      currPlayer ? slicedPegState[i].clickedBy = 1 : slicedPegState[i].clickedBy = 2;\n      checkPotentialLines(i);\n      setCurrPlayer(!currPlayer);\n    }\n\n    setPegState(slicedPegState);\n  }\n\n  const allPegs = pegs.map(peg => {\n    let currColor = \"black\";\n\n    if (peg.clickedBy === 1) {\n      currColor = \"red\";\n    } else if (peg.clickedBy === 2) {\n      currColor = \"blue\";\n    }\n\n    return /*#__PURE__*/React.createElement(Box, {\n      key: peg.id,\n      cx: peg.cx,\n      cy: peg.cy,\n      color: currColor,\n      onClick: () => handleClick(peg.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    });\n  });\n  const connections = lineState.map((line, index) => {\n    return /*#__PURE__*/React.createElement(Connection, {\n      key: index,\n      x1: line.p1.cx,\n      y1: line.p1.cx,\n      x2: line.p2.cx,\n      y2: line.p2.cy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    height: \"1000\",\n    width: \"1000\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, connections, allPegs);\n}\n\nexport default Board;","map":{"version":3,"sources":["/home/maxmoreno/Projects/twixt-remake/src/Board.js"],"names":["React","useState","Box","Connection","Board","props","initialPegs","initilizePegs","lineState","setLineState","currPlayer","setCurrPlayer","pegs","setPegState","initPegState","row","col","index","id","cx","cy","gx","gy","clickedBy","checkIfNoLineCrosses","newLine","checkPotentialLines","currPos","slicedLineState","slice","positions","i","length","potentialLine","p1","p2","push","handleClick","slicedPegState","allPegs","map","peg","currColor","connections","line"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Box from './Box';\nimport Connection from './Connection';\n\nfunction Board(props) {\n    const initialPegs = initilizePegs();\n    const [lineState, setLineState] = useState([]);\n    const [currPlayer, setCurrPlayer] = useState(true);\n    const [pegs, setPegState] = useState(initialPegs);\n\n    function initilizePegs() {\n        const initPegState = [];\n        for(let row = 0; row < 24; row++) {\n            for(let col = 0; col < 24; col++) {\n                const index = row * 24 + col;\n                initPegState[index] = {id: index, cx: 17.5 + col * 35,\n                    cy: 17.5 + row * 35, gx: col, gy: row, clickedBy: 0};\n            }\n        }\n        return initPegState;\n    }\n\n    /*\n        Compares a line that might be drawn to all the lines that have\n        currently been drawn\n    */\n    function checkIfNoLineCrosses(newLine) {\n        /*\n        for(const oldLine of lineState) {\n\n            const A1 = newLine.y2 - newLine.y1;\n            const B1 = newLine.x1 - newLine.x2;\n            const A2 = oldLine.y2 - oldLine.y1;\n            const B2 = oldLine.x1 - oldLine.x1;\n            const C1 = A1 * newLine.x1 + B1 * newLine.y1;\n            const C2 = A2 * oldLine.x1 + B2 * oldLine.y1;\n            const denominator = A1 * B2 - A2 * B1;\n\n            const x = (B2 * C1 - B1 * C2) / denominator;\n            const y = (A1 * C2 - A2 * C1) / denominator;\n\n            const rx0 = (x - newLine.x1) / (newLine.x2 - newLine.x1);\n            const rx1 = (x - oldLine.x1) / (oldLine.x2 - oldLine.x1);\n\n\n            console.log(x,y);\n\n            if(x !== 0 && y !== 0) {\n                if((rx0 >= 0 && rx0 <= 1) && (rx1 >= 0 && rx1 <= 1)) {\n                    console.log(x, y);\n                    if(x !== newLine.x2 && y !== newLine.y2){\n                        return false;\n                    }\n                }\n            }\n        }*/\n\n        return true;\n    }\n\n    function checkPotentialLines(currPos) {\n        \n        const slicedLineState = lineState.slice();\n        const positions = [22, 26, 47, 49];\n\n        // check the points above the clicked point\n        for(let i = 0; i < positions.length; i++) {\n            if(currPos >= positions[i]) {\n                if(pegs[currPos].clickedBy ===\n                    pegs[currPos - positions[i]].clickedBy) {\n                    const potentialLine = {\n                        p1: pegs[currPos],\n                        p2: pegs[currPos - positions[i]]\n                    };\n                    if(checkIfNoLineCrosses(potentialLine)) {\n                        slicedLineState.push(potentialLine);\n                    }\n                }\n            }\n        }\n\n        // check the points below the clicked points\n        for(let i = 0; i < positions.length; i++) {\n            if(currPos <= 576 - positions[i]) {\n                if(pegs[currPos].clickedBy ===\n                    pegs[currPos + positions[i]].clickedBy) {\n                    const potentialLine = {\n                        p1: pegs[currPos],\n                        p2: pegs[currPos + positions[i]]\n                    };\n                    if(checkIfNoLineCrosses(potentialLine)) {\n                        slicedLineState.push(potentialLine);\n                    }\n                }\n            }\n        }\n        setLineState(slicedLineState);\n    }\n\n    function handleClick(i) {\n        const slicedPegState = pegs.slice();\n        if(slicedPegState[i].clickedBy === 0) {\n            currPlayer ? slicedPegState[i].clickedBy = 1 :\n                slicedPegState[i].clickedBy = 2;\n            checkPotentialLines(i);\n            setCurrPlayer(!currPlayer);\n        }\n        setPegState(slicedPegState);\n    }\n\n    const allPegs = pegs.map((peg) => {\n        let currColor = \"black\";\n        if(peg.clickedBy === 1) {\n            currColor = \"red\";\n        } else if(peg.clickedBy === 2) {\n            currColor = \"blue\";\n        }\n        return(\n            <Box key = {peg.id} cx = {peg.cx} cy = {peg.cy} color = {currColor}\n                onClick = {() => handleClick(peg.id)}/>\n        )\n    })\n\n    const connections = lineState.map((line, index) => {\n        return(\n            <Connection key = {index} x1 = {line.p1.cx} y1 = {line.p1.cx}\n                x2 = {line.p2.cx} y2 = {line.p2.cy}/>\n        )\n    })\n\n    return (\n        <svg height = \"1000\" width = \"1000\">\n            { connections }\n            { allPegs }\n        </svg>\n    )\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}