{"ast":null,"code":"var _jsxFileName = \"/home/maxmoreno/Projects/twixt-remake/src/Board.js\";\nimport React, { useState, useEffect } from 'react';\nimport Box from './Box';\nimport Connection from './Connection';\n\nfunction Board(props) {\n  const [boardState, setBoardState] = useState([]);\n  const [lineState, setLineState] = useState([]);\n  const [currLineState, setCurrLineState] = useState(0);\n\n  function createMatrix(line1, line2) {\n    const slope1 = findSlope(line1.startPoint, line1.endPoint);\n    const slope2 = findSlope(line2.startPoint, line2.endPoint2);\n    const initMatrix = [-1 * slope1, 1, -1 * slope1 * startPoint.y + startPoint.x, -1 * slope2, 1, -1 * slope2 * startPoint2.y + startPoint2.x];\n    return initMatrix;\n  }\n\n  function rowReduce(matrix) {\n    // first operation\n    const a1 = matrix[0];\n    matrix[0] = 1;\n    matrix[1] = matrix[1] / a1;\n    matrix[2] = matrix[2] / a1; // 0 in first col second row\n\n    const a2 = matrix[3];\n    matrix[3] = 0;\n    matrix[4] = matrix[4] + matrix[1] * -1 * a2;\n    matrix[5] = matrix[5] + matrix[2] * -1 * a2; // 1 in the second column\n\n    const b2 = matrix[4];\n    matrix[4] = 1;\n    matrix[5] = matrix[5] / b2;\n    const b1 = matrix[1];\n    matrix[1] = 0;\n    matrix[2] = matrix[2] + -1 * b1 * matrix[5];\n    return matrix;\n  }\n\n  function checkIfIntersect(matrix, startPoint) {\n    const point = {\n      x: matrix[2],\n      y: matrix[5]\n    };\n\n    if (point.x != startPoint.x && point.y == startPoint.y) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function findSlope(point1, point2) {\n    const slope = (point1.x - point2.x) / (point1.y - point2.y);\n    return slope;\n  }\n\n  function checkIfValidLine(newLine, oldLine) {\n    const currMatrix = createMatrix(newLine.startPoint, newLine.endPoint, oldLine.startPoint, oldLine.endPoint);\n    rowReduce(currMatrix);\n    console.log(currMatrix);\n    return true;\n  }\n\n  function handleBoxClick(box) {\n    const slicedBoardState = boardState.slice();\n    slicedBoardState.push({\n      startPoint: box.cx,\n      endPoint: box.cy\n    });\n    setBoardState(slicedBoardState);\n    setCurrLineState(currLineState + 1);\n  }\n\n  function resetState() {\n    console.log(\"here\");\n\n    if (currLineState === 2) {\n      const slicedLineState = lineState.slice();\n      const newLine = {\n        x1: boardState[boardState.length - 2].startPoint,\n        y1: boardState[boardState.length - 2].endPoint,\n        x2: boardState[boardState.length - 1].startPoint,\n        y2: boardState[boardState.length - 1].endPoint\n      };\n\n      for (const oldLine of connections) {\n        if (checkIfValidLine(newLine, oldLine)) {\n          slicedLineState.push(newLine);\n          break;\n        }\n      }\n\n      setLineState(slicedLineState);\n      setCurrLineState(0);\n      setBoardState([]);\n    }\n  }\n\n  useEffect(resetState);\n  const arr = [];\n\n  for (let row = 0; row < 24; row++) {\n    for (let col = 0; col < 24; col++) {\n      const index = row * 24 + col;\n      arr[index] = {\n        id: index,\n        cx: 17.5 + col * 35,\n        cy: 17.5 + row * 35\n      };\n    }\n  }\n\n  const boxes = arr.map(box => {\n    return /*#__PURE__*/React.createElement(Box, {\n      key: box.id,\n      cx: box.cx,\n      cy: box.cy,\n      onClick: () => handleBoxClick(box),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    });\n  });\n  const connections = lineState.map((line, index) => {\n    return /*#__PURE__*/React.createElement(Connection, {\n      key: index,\n      x1: line.x1,\n      y1: line.y1,\n      x2: line.x2,\n      y2: line.y2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    height: \"800\",\n    width: \"800\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, connections, boxes);\n}\n\nexport default Board;","map":{"version":3,"sources":["/home/maxmoreno/Projects/twixt-remake/src/Board.js"],"names":["React","useState","useEffect","Box","Connection","Board","props","boardState","setBoardState","lineState","setLineState","currLineState","setCurrLineState","createMatrix","line1","line2","slope1","findSlope","startPoint","endPoint","slope2","endPoint2","initMatrix","y","x","startPoint2","rowReduce","matrix","a1","a2","b2","b1","checkIfIntersect","point","point1","point2","slope","checkIfValidLine","newLine","oldLine","currMatrix","console","log","handleBoxClick","box","slicedBoardState","slice","push","cx","cy","resetState","slicedLineState","x1","length","y1","x2","y2","connections","arr","row","col","index","id","boxes","map","line"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Box from './Box';\nimport Connection from './Connection';\n\nfunction Board(props) {\n    const [boardState, setBoardState] = useState([]);\n    const [lineState, setLineState] = useState([]);\n    const [currLineState, setCurrLineState] = useState(0);\n    \n    function createMatrix(line1, line2) {\n        const slope1 = findSlope(line1.startPoint, line1.endPoint);\n        const slope2 = findSlope(line2.startPoint, line2.endPoint2);\n        const initMatrix = [-1* slope1, 1, (-1 * slope1 * startPoint.y) + startPoint.x, -1* slope2, 1, (-1 * slope2 * startPoint2.y) + startPoint2.x];\n        return initMatrix;\n    }\n\nfunction rowReduce(matrix) {\n    // first operation\n    const a1 = matrix[0]\n    matrix[0] = 1\n    matrix[1] = matrix[1] / a1\n    matrix[2] = matrix[2] / a1\n    \n    // 0 in first col second row\n    const a2 = matrix[3]\n    matrix[3] = 0;\n    matrix[4] = matrix[4] + (matrix[1]*-1*a2)   \n    matrix[5] = matrix[5] + (matrix[2]*-1*a2)\n    \n    // 1 in the second column\n    const b2 = matrix[4]\n    matrix[4] = 1\n    matrix[5] = matrix[5] / b2\n\n    const b1 = matrix[1]\n    matrix[1] = 0\n    matrix[2] = matrix[2] + (-1 * b1  * matrix[5])\n    return matrix\n}\n\nfunction checkIfIntersect(matrix, startPoint) {\n    const point = {x: matrix[2], y: matrix[5]}\n    if(point.x != startPoint.x && point.y == startPoint.y) {\n        return false\n    }\n    return true\n}\n\nfunction findSlope(point1, point2) {\n    const slope = (point1.x - point2.x) / (point1.y - point2.y)\n    return slope\n}\n\nfunction checkIfValidLine(newLine, oldLine) {\n    const currMatrix = createMatrix(newLine.startPoint, newLine.endPoint, oldLine.startPoint, oldLine.endPoint)\n    rowReduce(currMatrix);\n    console.log(currMatrix);\n    return true;\n}\n\n\n\n    function handleBoxClick(box) {\n        const slicedBoardState = boardState.slice();\n        slicedBoardState.push({startPoint: box.cx, endPoint: box.cy});\n        setBoardState(slicedBoardState);\n        setCurrLineState(currLineState + 1);\n    }\n\n    function resetState() {\n        console.log(\"here\");\n        if(currLineState === 2){\n            const slicedLineState = lineState.slice();\n            const newLine = {x1: boardState[boardState.length - 2].startPoint, y1: boardState[boardState.length - 2].endPoint,\n                x2: boardState[boardState.length - 1].startPoint, y2:boardState[boardState.length - 1].endPoint};\n            for(const oldLine of connections) {\n                if(checkIfValidLine(newLine, oldLine)) {\n                    slicedLineState.push(newLine);\n                    break;\n                }\n            }\n\n            setLineState(slicedLineState);\n            setCurrLineState(0);\n            setBoardState([]);\n        }\n    }\n\n    useEffect(resetState);\n\n    const arr = [];\n    for(let row = 0; row < 24; row++) {\n        for(let col = 0; col < 24; col++) {\n            const index = row * 24 + col;\n            arr[index] = {id: index, cx: 17.5 + col * 35, cy: 17.5 + row * 35};\n        }\n    }\n\n    const boxes = arr.map((box) => {\n        return(\n            <Box key = {box.id} cx = {box.cx} cy = {box.cy} onClick = {() => handleBoxClick(box)}/>\n        )\n    })\n\n    const connections = lineState.map((line, index) => {\n        return(\n            <Connection key = {index} x1 = {line.x1} y1 = {line.y1} x2 = {line.x2} y2 = {line.y2}/>\n        )\n    })\n\n    return (\n        <svg height = \"800\" width = \"800\">\n            { connections }\n            { boxes }\n        </svg>\n    )\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}