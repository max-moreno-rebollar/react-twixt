{"ast":null,"code":"var _jsxFileName = \"/home/max-moreno/Projects/react-twixt/client/src/Game Page/Board.js\";\nimport React, { useState, useEffect } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport Box from './Box';\nimport Connection from './Connection';\nimport Player from './Player';\nimport Winner from './Winner';\nimport Border from './Border';\nconst endPoint = \"http://127.0.0.1:8080\";\nconst socket = socketIOClient(endPoint);\n\nfunction Board(props) {\n  const initialPegs = initilizePegs();\n  const initialAdjList = initAdjList();\n  const [lineState, setLineState] = useState([]);\n  const [currPlayer, setCurrPlayer] = useState(true);\n  const [pegs, setPegState] = useState(initialPegs);\n  const [adjList, setAdjListState] = useState(initialAdjList);\n  const [visited, setVistedState] = useState(new Array(580).fill(false));\n  const [winner, setWinner] = useState(0);\n\n  function initAdjList() {\n    const adjList = new Array(580).fill([]); // connect top row to top node\n\n    for (let i = 1; i < 23; i++) {\n      const temp = adjList[i].slice();\n      temp.push(576);\n      const temp2 = adjList[576].slice();\n      temp2.push(i);\n      adjList[576] = temp2;\n    } // connect bottom row to bottom node\n\n\n    for (let j = 553; j < 575; j++) {\n      const temp = adjList[j].slice();\n      temp.push(577);\n      adjList[j] = temp;\n      const temp2 = adjList[577].slice();\n      temp2.push(j);\n      adjList[577] = temp2;\n    } // connect left row to left node\n\n\n    for (let i = 1; i < 23; i++) {\n      const index = i * 24;\n      const temp = adjList[index].slice();\n      temp.push(578);\n      adjList[index] = temp;\n      const temp2 = adjList[578].slice();\n      temp2.push(index);\n      adjList[578] = temp2;\n    } // connect right row to right node\n\n\n    for (let j = 1; j < 23; j++) {\n      const index = j * 24 + 23;\n      const temp = adjList[index].slice();\n      temp.push(579);\n      adjList[index] = temp;\n      const temp2 = adjList[579].slice();\n      temp2.push(index);\n      adjList[579] = temp2;\n    }\n\n    return adjList;\n  }\n\n  function initilizePegs() {\n    const initPegState = [];\n\n    for (let row = 0; row < 24; row++) {\n      for (let col = 0; col < 24; col++) {\n        const index = row * 24 + col;\n        initPegState[index] = {\n          id: index,\n          cx: 17.5 + col * 35,\n          cy: 17.5 + row * 35,\n          gx: col,\n          gy: row,\n          clickedBy: 0\n        };\n      }\n    }\n\n    return initPegState;\n  }\n  /*\n      Compares a line that might be drawn to all the lines that have\n      currently been drawn\n  */\n\n\n  function checkIfNoLineCrosses(newLine) {\n    for (const oldLine of lineState) {\n      const A1 = newLine.p2.gy - newLine.p1.gy;\n      const B1 = newLine.p1.gx - newLine.p2.gx;\n      const A2 = oldLine.p2.gy - oldLine.p1.gy;\n      const B2 = oldLine.p1.gx - oldLine.p2.gx;\n      const C1 = A1 * newLine.p1.gx + B1 * newLine.p1.gy;\n      const C2 = A2 * oldLine.p1.gx + B2 * oldLine.p1.gy;\n      const denominator = A1 * B2 - A2 * B1;\n      const x = (B2 * C1 - B1 * C2) / denominator;\n      const y = (A1 * C2 - A2 * C1) / denominator;\n      const rx0 = (x - newLine.p1.gx) / (newLine.p2.gx - newLine.p1.gx);\n      const rx1 = (x - oldLine.p1.gx) / (oldLine.p2.gx - oldLine.p1.gx);\n\n      if (x !== 0 && y !== 0) {\n        if (rx0 >= 0 && rx0 <= 1 && rx1 >= 0 && rx1 <= 1) {\n          if (x !== newLine.p2.gx && y !== newLine.p2.gy) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  function checkPotentialLines(currPos, adjList) {\n    const slicedLineState = lineState.slice();\n    const positions = [22, 26, 47, 49]; // check the points above the clicked point\n\n    for (let i = 0; i < positions.length; i++) {\n      if (currPos >= positions[i]) {\n        if (pegs[currPos].clickedBy === pegs[currPos - positions[i]].clickedBy) {\n          const potentialLine = {\n            p1: pegs[currPos],\n            p2: pegs[currPos - positions[i]]\n          };\n\n          if (checkIfNoLineCrosses(potentialLine)) {\n            slicedLineState.push(potentialLine);\n            const temp1 = adjList[potentialLine.p1.id].slice();\n            temp1.push(potentialLine.p2.id);\n            adjList[potentialLine.p1.id] = temp1;\n            const temp2 = adjList[potentialLine.p2.id].slice();\n            temp2.push(potentialLine.p1.id);\n            adjList[potentialLine.p2.id] = temp2;\n          }\n        }\n      }\n    } // check the points below the clicked points\n\n\n    for (let i = 0; i < positions.length; i++) {\n      if (currPos <= 576 - positions[i]) {\n        if (pegs[currPos].clickedBy === pegs[currPos + positions[i]].clickedBy) {\n          const potentialLine = {\n            p1: pegs[currPos],\n            p2: pegs[currPos + positions[i]]\n          };\n\n          if (checkIfNoLineCrosses(potentialLine)) {\n            slicedLineState.push(potentialLine);\n            const temp1 = adjList[potentialLine.p1.id].slice();\n            temp1.push(potentialLine.p2.id);\n            adjList[potentialLine.p1.id] = temp1;\n            const temp2 = adjList[potentialLine.p2.id].slice();\n            temp2.push(potentialLine.p1.id);\n            adjList[potentialLine.p2.id] = temp2;\n          }\n        }\n      }\n    }\n\n    return slicedLineState;\n  }\n\n  function containsPath(adjList, node1) {\n    visited[node1] = true;\n\n    for (const children of adjList[node1]) {\n      if (visited[children] !== true) {\n        containsPath(adjList, children);\n      }\n    }\n  }\n\n  function checkWinner() {\n    if (currPlayer) {\n      containsPath(adjList, 576);\n\n      if (visited[577]) {\n        return 1;\n      }\n    } else {\n      containsPath(adjList, 578);\n\n      if (visited[579]) {\n        return 2;\n      }\n    }\n  }\n\n  function handleClick(i, adjList) {\n    const slicedPegState = pegs.slice();\n\n    if (slicedPegState[i].clickedBy === 0) {\n      currPlayer ? slicedPegState[i].clickedBy = 1 : slicedPegState[i].clickedBy = 2;\n    }\n\n    const slicedLineState = checkPotentialLines(i, adjList);\n    const win = checkWinner();\n    send(slicedPegState, slicedLineState, adjList, win);\n  }\n\n  const allPegs = pegs.map(peg => {\n    let currColor = \"black\";\n\n    if (peg.clickedBy === 1) {\n      currColor = \"red\";\n    } else if (peg.clickedBy === 2) {\n      currColor = \"blue\";\n    }\n\n    return /*#__PURE__*/React.createElement(Box, {\n      key: peg.id,\n      cx: peg.cx,\n      cy: peg.cy,\n      color: currColor,\n      onClick: () => handleClick(peg.id, adjList),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }\n    });\n  });\n  const connections = lineState.map((line, index) => {\n    return /*#__PURE__*/React.createElement(Connection, {\n      key: index,\n      x1: line.p1.cx,\n      y1: line.p1.cy,\n      x2: line.p2.cx,\n      y2: line.p2.cy,\n      stroke: \"black\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }\n    });\n  });\n\n  function send(toBePegState, toBeLineState, toBeAdjListState, toBeWinnerState) {\n    //const socket = socketIOClient(endPoint);\n    const data = new Array();\n    data[0] = toBePegState;\n    data[1] = currPlayer;\n    data[2] = toBeLineState;\n    data[3] = toBeAdjListState;\n    data[4] = toBeWinnerState;\n    socket.emit('peg dropped', data); //return () => socket.disconnect();\n  }\n\n  useEffect(() => {\n    //const socket = socketIOClient(endPoint);\n    socket.on('peg dropped', data => {\n      setPegState(data[0]);\n      setCurrPlayer(!data[1]);\n      setLineState(data[2]);\n      setAdjListState(data[3]);\n      setVistedState(new Array(580).fill(false));\n      setWinner(data[4]);\n    }); //return () => socket.disconnect();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Player, {\n    player: currPlayer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Winner, {\n    winner: winner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"svg\", {\n    height: \"1000\",\n    width: \"1000\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Border, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 17\n    }\n  }), connections, allPegs));\n}\n\nexport default Board;","map":{"version":3,"sources":["/home/max-moreno/Projects/react-twixt/client/src/Game Page/Board.js"],"names":["React","useState","useEffect","socketIOClient","Box","Connection","Player","Winner","Border","endPoint","socket","Board","props","initialPegs","initilizePegs","initialAdjList","initAdjList","lineState","setLineState","currPlayer","setCurrPlayer","pegs","setPegState","adjList","setAdjListState","visited","setVistedState","Array","fill","winner","setWinner","i","temp","slice","push","temp2","j","index","initPegState","row","col","id","cx","cy","gx","gy","clickedBy","checkIfNoLineCrosses","newLine","oldLine","A1","p2","p1","B1","A2","B2","C1","C2","denominator","x","y","rx0","rx1","checkPotentialLines","currPos","slicedLineState","positions","length","potentialLine","temp1","containsPath","node1","children","checkWinner","handleClick","slicedPegState","win","send","allPegs","map","peg","currColor","connections","line","toBePegState","toBeLineState","toBeAdjListState","toBeWinnerState","data","emit","on"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport Box from './Box';\nimport Connection from './Connection';\nimport Player from './Player';\nimport Winner from './Winner';\nimport Border from './Border';\n\nconst endPoint = \"http://127.0.0.1:8080\";\nconst socket = socketIOClient(endPoint);\n\nfunction Board(props) {\n    const initialPegs = initilizePegs();\n    const initialAdjList = initAdjList();\n    const [lineState, setLineState] = useState([]);\n    const [currPlayer, setCurrPlayer] = useState(true);\n    const [pegs, setPegState] = useState(initialPegs);\n    const [adjList, setAdjListState] = useState(initialAdjList);\n    const [visited, setVistedState] = useState(new Array(580).fill(false));\n    const [winner, setWinner] = useState(0);\n\n    function initAdjList() {\n        const adjList = new Array(580).fill([]);\n        // connect top row to top node\n        for(let i = 1; i < 23; i++) {\n            const temp = adjList[i].slice();\n            temp.push(576);\n            const temp2 = adjList[576].slice();\n            temp2.push(i);\n            adjList[576] = temp2;\n        }\n\n        // connect bottom row to bottom node\n        for(let j = 553; j < 575; j++) {\n            const temp = adjList[j].slice();\n            temp.push(577);\n            adjList[j] = temp;\n\n            const temp2 = adjList[577].slice();\n            temp2.push(j);\n            adjList[577] = temp2;\n        }\n\n        // connect left row to left node\n        for(let i = 1; i < 23; i++) {\n            const index = i * 24;\n            const temp = adjList[index].slice();\n            temp.push(578);\n            adjList[index] = temp;\n\n            const temp2 = adjList[578].slice();\n            temp2.push(index);\n            adjList[578] = temp2;\n        }\n\n\n        // connect right row to right node\n        for(let j = 1; j < 23; j++) {\n            const index = j * 24 + 23;\n            const temp = adjList[index].slice();\n            temp.push(579);\n            adjList[index] = temp;\n\n            const temp2 = adjList[579].slice();\n            temp2.push(index);\n            adjList[579] = temp2;\n        }\n\n        return adjList;\n    }\n\n    function initilizePegs() {\n        const initPegState = [];\n        for(let row = 0; row < 24; row++) {\n            for(let col = 0; col < 24; col++) {\n                const index = row * 24 + col;\n                initPegState[index] = {id: index, cx: 17.5 + col * 35,\n                    cy: 17.5 + row * 35, gx: col, gy: row, clickedBy: 0};\n            }\n        }\n        return initPegState;\n    }\n\n    /*\n        Compares a line that might be drawn to all the lines that have\n        currently been drawn\n    */\n    function checkIfNoLineCrosses(newLine) {\n        \n        for(const oldLine of lineState) {\n\n            const A1 = newLine.p2.gy - newLine.p1.gy;\n            const B1 = newLine.p1.gx - newLine.p2.gx;\n            const A2 = oldLine.p2.gy - oldLine.p1.gy;\n            const B2 = oldLine.p1.gx - oldLine.p2.gx;\n            const C1 = A1 * newLine.p1.gx + B1 * newLine.p1.gy;\n            const C2 = A2 * oldLine.p1.gx + B2 * oldLine.p1.gy;\n            const denominator = A1 * B2 - A2 * B1;\n\n            const x = (B2 * C1 - B1 * C2) / denominator;\n            const y = (A1 * C2 - A2 * C1) / denominator;\n\n            const rx0 = (x - newLine.p1.gx) / (newLine.p2.gx - newLine.p1.gx);\n            const rx1 = (x - oldLine.p1.gx) / (oldLine.p2.gx - oldLine.p1.gx);\n\n            if(x !== 0 && y !== 0) {\n                if((rx0 >= 0 && rx0 <= 1) && (rx1 >= 0 && rx1 <= 1)) {\n                    if(x !== newLine.p2.gx && y !== newLine.p2.gy){\n                        return false;\n                    }\n                }\n            }\n        }    \n\n        return true;\n    }\n\n    function checkPotentialLines(currPos, adjList) {\n        \n        const slicedLineState = lineState.slice();\n        const positions = [22, 26, 47, 49];\n\n        // check the points above the clicked point\n        for(let i = 0; i < positions.length; i++) {\n            if(currPos >= positions[i]) {\n                if(pegs[currPos].clickedBy ===\n                    pegs[currPos - positions[i]].clickedBy) {\n                    const potentialLine = {\n                        p1: pegs[currPos],\n                        p2: pegs[currPos - positions[i]]\n                    };\n                    if(checkIfNoLineCrosses(potentialLine)) {\n                        slicedLineState.push(potentialLine);\n                        const temp1 = adjList[potentialLine.p1.id].slice();\n                        temp1.push(potentialLine.p2.id);\n                        adjList[potentialLine.p1.id] = temp1;\n\n                        const temp2 = adjList[potentialLine.p2.id].slice();\n                        temp2.push(potentialLine.p1.id);\n                        adjList[potentialLine.p2.id] = temp2;\n                    }\n                }\n            }\n        }\n\n        // check the points below the clicked points\n        for(let i = 0; i < positions.length; i++) {\n            if(currPos <= 576 - positions[i]) {\n                if(pegs[currPos].clickedBy ===\n                    pegs[currPos + positions[i]].clickedBy) {\n                    const potentialLine = {\n                        p1: pegs[currPos],\n                        p2: pegs[currPos + positions[i]]\n                    };\n                    if(checkIfNoLineCrosses(potentialLine)) {\n                        slicedLineState.push(potentialLine);\n                        const temp1 = adjList[potentialLine.p1.id].slice();\n                        temp1.push(potentialLine.p2.id);\n                        adjList[potentialLine.p1.id] = temp1;\n\n                        const temp2 = adjList[potentialLine.p2.id].slice();\n                        temp2.push(potentialLine.p1.id);\n                        adjList[potentialLine.p2.id] = temp2;\n                    }\n                }\n            }\n        }\n\n        return slicedLineState;\n    }\n\n    \n    function containsPath(adjList, node1) {\n        visited[node1] = true;\n        for(const children of adjList[node1]) {\n            if(visited[children] !== true) {\n                containsPath(adjList, children);\n            }\n        }\n    }\n\n    function checkWinner() {\n        if(currPlayer) {\n            containsPath(adjList, 576);\n            if(visited[577]) {\n                return 1;\n            }\n        } else {\n            containsPath(adjList, 578);\n            if(visited[579]) {\n                return 2;\n            }\n        }\n    }\n\n    function handleClick(i, adjList) {\n        const slicedPegState = pegs.slice();\n        if(slicedPegState[i].clickedBy === 0) {\n            currPlayer ? slicedPegState[i].clickedBy = 1 :\n                slicedPegState[i].clickedBy = 2;\n        }\n        const slicedLineState = checkPotentialLines(i, adjList);\n        const win = checkWinner();\n        send(slicedPegState, slicedLineState, adjList, win);\n    }\n\n    const allPegs = pegs.map((peg) => {\n        let currColor = \"black\";\n        if(peg.clickedBy === 1) {\n            currColor = \"red\";\n        } else if(peg.clickedBy === 2) {\n            currColor = \"blue\";\n        }\n        return(\n            <Box key = {peg.id} cx = {peg.cx} cy = {peg.cy} color = {currColor}\n                onClick = {() => handleClick(peg.id, adjList)}/>\n        )\n    })\n\n    const connections = lineState.map((line, index) => {\n        return(\n            <Connection key = {index} x1 = {line.p1.cx} y1 = {line.p1.cy}\n                x2 = {line.p2.cx} y2 = {line.p2.cy} stroke = \"black\"/>\n        )\n    })\n\n    function send(toBePegState, toBeLineState, toBeAdjListState, toBeWinnerState) {\n        //const socket = socketIOClient(endPoint);\n        const data = new Array();\n        data[0] = toBePegState;\n        data[1] = currPlayer;\n        data[2] = toBeLineState;\n        data[3] = toBeAdjListState;\n        data[4] = toBeWinnerState;\n        socket.emit('peg dropped', data);\n        //return () => socket.disconnect();\n    }\n\n    useEffect(() => {\n        //const socket = socketIOClient(endPoint);\n        socket.on('peg dropped', (data) => {\n            setPegState(data[0]);\n            setCurrPlayer(!data[1]);\n            setLineState(data[2]);\n            setAdjListState(data[3]);\n            setVistedState(new Array(580).fill(false));\n            setWinner(data[4]);\n        });\n\n\n\n        //return () => socket.disconnect();\n    }, []);\n\n    return (\n        <div>\n            <Player player = {currPlayer}/>\n            <Winner winner = {winner}/>     \n            <svg height = \"1000\" width = \"1000\">\n                <Border />\n                { connections }\n                { allPegs }\n            </svg>\n        </div>\n    )\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}