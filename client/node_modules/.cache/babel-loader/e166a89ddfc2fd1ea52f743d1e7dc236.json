{"ast":null,"code":"var _jsxFileName = \"/home/maxmoreno/Projects/twixt-remake/src/Board.js\";\nimport React, { useState } from 'react';\nimport Box from './Box';\nimport Connection from './Connection';\n\nfunction Board(props) {\n  const initialPegs = initilizePegs();\n  const [lineState, setLineState] = useState([]);\n  const [currPlayer, setCurrPlayer] = useState(true);\n  const [pegs, setPegState] = useState(initialPegs);\n\n  function initilizePegs() {\n    const initPegState = [];\n\n    for (let row = 0; row < 24; row++) {\n      for (let col = 0; col < 24; col++) {\n        const index = row * 24 + col;\n        initPegState[index] = {\n          id: index,\n          cx: 17.5 + col * 35,\n          cy: 17.5 + row * 35,\n          clickedBy: 0\n        };\n      }\n    }\n\n    return initPegState;\n  }\n  /*\n      Compares a line that might be drawn to all the lines that have\n      currently been drawn\n  */\n\n\n  function checkIfNoLineCrosses(newLine) {\n    for (const oldLine of lineState) {\n      const A1 = newLine.y2 - newLine.y1;\n      const B1 = newLine.x1 - newLine.x2;\n      const A2 = oldLine.y2 - oldLine.y1;\n      const B2 = oldLine.x1 - oldLine.x1;\n      const C1 = A1 * newLine.x1 + B1 * newLine.y1;\n      const C2 = A2 * oldLine.x1 + B2 * oldLine.y1;\n      const denominator = A1 * B2 - A2 * B1;\n      const x = (B2 * C1 - B1 * C2) / denominator;\n      const y = (A1 * C2 - A2 * C1) / denominator;\n      const rx0 = (x - newLine.x1) / (newLine.x2 - newLine.x1);\n      const rx1 = (x - oldLine.x1) / (oldLine.x2 - oldLine.x2);\n\n      if (rx0 >= 0 && rx0 <= 1) {\n        if (rx0 >= 0 && rx0 <= 1) {\n          if (x != newLine.x2 && y != newLine.y2) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  function checkPotentialLines(currPos) {\n    const slicedLineState = lineState.slice();\n    const positions = [22, 26, 47, 49]; // check the points above the clicked point\n\n    for (let i = 0; i < positions.length; i++) {\n      if (currPos >= positions[i]) {\n        if (pegs[currPos].clickedBy === pegs[currPos - positions[i]].clickedBy) {\n          const potentialLine = {\n            x1: pegs[currPos].cx,\n            y1: pegs[currPos].cy,\n            x2: pegs[currPos - positions[i]].cx,\n            y2: pegs[currPos - positions[i]].cy\n          };\n\n          if (checkIfNoLineCrosses(potentialLine)) {\n            slicedLineState.push(potentialLine);\n          }\n        }\n      }\n    } // check the points below the clicked points\n\n\n    for (let i = 0; i < positions.length; i++) {\n      if (currPos <= 574 - positions[i]) {\n        if (pegs[currPos].clickedBy === pegs[currPos + positions[i]].clickedBy) {\n          const potentialLine = {\n            x1: pegs[currPos].cx,\n            y1: pegs[currPos].cy,\n            x2: pegs[currPos + positions[i]].cx,\n            y2: pegs[currPos + positions[i]].cy\n          };\n\n          if (checkIfNoLineCrosses(potentialLine)) {\n            slicedLineState.push(potentialLine);\n          }\n        }\n      }\n    }\n\n    setLineState(slicedLineState);\n  }\n\n  function handleClick(i) {\n    const slicedPegState = pegs.slice();\n\n    if (slicedPegState[i].clickedBy === 0) {\n      currPlayer ? slicedPegState[i].clickedBy = 1 : slicedPegState[i].clickedBy = 2;\n      checkPotentialLines(i);\n      setCurrPlayer(!currPlayer);\n    }\n\n    setPegState(slicedPegState);\n  }\n\n  const allPegs = pegs.map(peg => {\n    let currColor = \"black\";\n\n    if (peg.clickedBy === 1) {\n      currColor = \"red\";\n    } else if (peg.clickedBy === 2) {\n      currColor = \"blue\";\n    }\n\n    return /*#__PURE__*/React.createElement(Box, {\n      key: peg.id,\n      cx: peg.cx,\n      cy: peg.cy,\n      color: currColor,\n      onClick: () => handleClick(peg.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    });\n  });\n  const connections = lineState.map((line, index) => {\n    return /*#__PURE__*/React.createElement(Connection, {\n      key: index,\n      x1: line.x1,\n      y1: line.y1,\n      x2: line.x2,\n      y2: line.y2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    height: \"800\",\n    width: \"800\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, connections, allPegs);\n}\n\nexport default Board;","map":{"version":3,"sources":["/home/maxmoreno/Projects/twixt-remake/src/Board.js"],"names":["React","useState","Box","Connection","Board","props","initialPegs","initilizePegs","lineState","setLineState","currPlayer","setCurrPlayer","pegs","setPegState","initPegState","row","col","index","id","cx","cy","clickedBy","checkIfNoLineCrosses","newLine","oldLine","A1","y2","y1","B1","x1","x2","A2","B2","C1","C2","denominator","x","y","rx0","rx1","checkPotentialLines","currPos","slicedLineState","slice","positions","i","length","potentialLine","push","handleClick","slicedPegState","allPegs","map","peg","currColor","connections","line"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Box from './Box';\nimport Connection from './Connection';\n\nfunction Board(props) {\n    const initialPegs = initilizePegs();\n    const [lineState, setLineState] = useState([]);\n    const [currPlayer, setCurrPlayer] = useState(true);\n    const [pegs, setPegState] = useState(initialPegs);\n\n    function initilizePegs() {\n        const initPegState = [];\n        for(let row = 0; row < 24; row++) {\n            for(let col = 0; col < 24; col++) {\n                const index = row * 24 + col;\n                initPegState[index] = {id: index, cx: 17.5 + col * 35,\n                    cy: 17.5 + row * 35, clickedBy: 0};\n            }\n        }\n        return initPegState;\n    }\n\n    /*\n        Compares a line that might be drawn to all the lines that have\n        currently been drawn\n    */\n    function checkIfNoLineCrosses(newLine) {\n        for(const oldLine of lineState) {\n            const A1 = newLine.y2 - newLine.y1;\n            const B1 = newLine.x1 - newLine.x2;\n            const A2 = oldLine.y2 - oldLine.y1;\n            const B2 = oldLine.x1 - oldLine.x1;\n            const C1 = A1 * newLine.x1 + B1 * newLine.y1;\n            const C2 = A2 * oldLine.x1 + B2 * oldLine.y1;\n            const denominator = A1 * B2 - A2 * B1;\n\n            const x = (B2 * C1 - B1 * C2) / denominator;\n            const y = (A1 * C2 - A2 * C1) / denominator;\n\n            const rx0 = (x - newLine.x1) / (newLine.x2 - newLine.x1);\n            const rx1 = (x - oldLine.x1) / (oldLine.x2 - oldLine.x2);\n\n            if(rx0 >= 0 && rx0 <= 1) {\n                if(rx0 >= 0 && rx0 <= 1) {\n                    if(x != newLine.x2 && y != newLine.y2){\n                        return false;\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function checkPotentialLines(currPos) {\n        \n        const slicedLineState = lineState.slice();\n        const positions = [22, 26, 47, 49];\n\n        // check the points above the clicked point\n        for(let i = 0; i < positions.length; i++) {\n            if(currPos >= positions[i]) {\n                if(pegs[currPos].clickedBy ===\n                    pegs[currPos - positions[i]].clickedBy) {\n                    const potentialLine = {\n                        x1: pegs[currPos].cx,\n                        y1: pegs[currPos].cy,\n                        x2: pegs[currPos - positions[i]].cx,\n                        y2: pegs[currPos - positions[i]].cy};\n                    if(checkIfNoLineCrosses(potentialLine)) {\n                        slicedLineState.push(potentialLine);\n                    }\n                }\n            }\n        }\n\n        // check the points below the clicked points\n        for(let i = 0; i < positions.length; i++) {\n            if(currPos <= 574 - positions[i]) {\n                if(pegs[currPos].clickedBy ===\n                    pegs[currPos + positions[i]].clickedBy) {\n                    const potentialLine = {\n                        x1: pegs[currPos].cx,\n                        y1: pegs[currPos].cy,\n                        x2: pegs[currPos + positions[i]].cx,\n                        y2: pegs[currPos + positions[i]].cy};\n                    if(checkIfNoLineCrosses(potentialLine)) {\n                        slicedLineState.push(potentialLine);\n                    }\n                }\n            }\n        }\n        setLineState(slicedLineState);\n    }\n\n    function handleClick(i) {\n        const slicedPegState = pegs.slice();\n        if(slicedPegState[i].clickedBy === 0) {\n            currPlayer ? slicedPegState[i].clickedBy = 1 :\n                slicedPegState[i].clickedBy = 2;\n            checkPotentialLines(i);\n            setCurrPlayer(!currPlayer);\n        }\n        setPegState(slicedPegState);\n    }\n\n    const allPegs = pegs.map((peg) => {\n        let currColor = \"black\";\n        if(peg.clickedBy === 1) {\n            currColor = \"red\";\n        } else if(peg.clickedBy === 2) {\n            currColor = \"blue\";\n        }\n        return(\n            <Box key = {peg.id} cx = {peg.cx} cy = {peg.cy} color = {currColor}\n                onClick = {() => handleClick(peg.id)}/>\n        )\n    })\n\n    const connections = lineState.map((line, index) => {\n        return(\n            <Connection key = {index} x1 = {line.x1} y1 = {line.y1}\n                x2 = {line.x2} y2 = {line.y2}/>\n        )\n    })\n\n    return (\n        <svg height = \"800\" width = \"800\">\n            { connections }\n            { allPegs }\n        </svg>\n    )\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}